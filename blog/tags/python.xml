<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/blog/tags/python.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2016-01-23T22:56:53-06:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Code Like You Need Protection]]></title>
            <link href="http://ericpoe.com/blog/2014/02/14/code-like-you-need-protection"/>
            <updated>2014-02-14T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2014/02/14/code-like-you-need-protection</id>
            <content type="html"><![CDATA[<h2 id="background">Background</h2>

<p>I was recently tasked with  programming a connecty-bit between a Google Drive Form and our instance of SolarWinds Web Help Desk. Both are great products. Both offer fabulous APIs.</p>

<p>My overall plan was to periodically grab all information from the default worksheet of the Google Drive Form, translate it to JSON, and submit it to Web Help Desk to generate a ticket for each Google Drive Form record. I realized that I was faced with a dilemma: how do I retain client records in the Google Drive Form and only read from the newest records to generate these tickets?</p>

<p>I first  thought to add a "read" flag to each record that I had read and created a ticket. The problem that I saw with this algorithm was that I would have to read through N records each time I wanted to check for new tickets. If the tickets were in the lower-end of the number spectrum, I would hardly notice the time it took to iterate through all of these tickets; but once the amount of records reaches a "critical mass,"" the read-delay might exceed the period-length between the times the underlying-script checks for new records.</p>

<p>I decided that my best bet would be to create a new worksheet, an "archive" worksheet, and move each record, once processed, from from the default worksheet to this new "archive" worksheet.</p>

<h2 id="how-it%E2%80%99s-done">How it’s done</h2>

<p>My first love, in regards to programming, is PHP, so I thought I might program the  intermediate script in PHP; however, the server I was to run this on did not include PHP. On the other hand, it did run Python 2.</p>

<p>It has been a while since I have coded anything in Python, and even longer since I have written anything in Python 2. So, I fired up my browser and a handy VIM instance and checked out the very worthy <a href="http://learnpythonthehardway.org/book/">Python The Hard Way</a>.</p>

<p>After spending a day on that site, I felt that I was ready to tackle the Python 2 aspects of the Google Drive API ("gdata"). The trick was in figuring out which aspects of the gdata API would grab the data that I needed.</p>

<p>Meanwhile, one of my coworkers found the json API documentation from <a href="http://www.webhelpdesk.com/api/">Stormwinds Web Helpdesk API</a> and provided a proof-of-concept via CURL and some code from the documentation. Once I knew that json would work, I knew that I had to generate json code from the gdata API and submit it to our instance of the Solar Winds Web Helpdesk application via their API and my personal API key.</p>

<p>The rest of the script required that I determine how to generate the originating JSON and how to submit that JSON text via Python2.</p>

<p>The title of this document is something like "code like you need protection." This is in reference to something that I recently (aka "last 6 months") heard that goes something like: code like the next person to read your code is a serial killer who knows where you live. In other words, make sure that the code you write is well structured, well documented, and makes logical sense. To that end, I probably spent more time documenting and refactoring my code so that the 6-months-from-now-me who has to tweak the code doesn’t have to spend an inordinate amount of time trying to figure out what my present-me was attempting to do.</p>

<p>The final script can be seen in my <a href="https://github.com/ericpoe/ask-a-tech">GitHub repository</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Python Timing Comparison]]></title>
            <link href="http://ericpoe.com/blog/2011/10/01/python-timing-comparison"/>
            <updated>2011-10-01T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2011/10/01/python-timing-comparison</id>
            <content type="html"><![CDATA[<p>On page 7 of <a href="http://www.amazon.com/Learning-Python-Powerful-Object-Oriented-Programming/dp/0596158068/">Learning Python (4th ed)</a>, Mark Lutz briefly discusses the speed differences between Python and compiled languages like C++. I was curious as to how much slower an interpreted language is than a compiled language. To illustrate this, I whipped up a quick and simple program that exercises the CPU so I can see the difference — calculating 2^a-big-number, chosen at runtime, should do the trick. PHP is used in this example as another interpreted language to be compared against.</p>

<p>C++:</p>

<pre><code class="cpp">#include &lt;stdio.h&gt;
#include &lt;cmath&gt;
#include &lt;cstdlib&gt;
using namespace std;
int main(int argc, char* argv[]){
    printf("%lf\n", pow(2,atoi(argv[1])));
    return 0;
}
</code></pre>

<p>Python 3:</p>

<pre><code class="python">import sys
print(2 ** int(sys.argv[1]))
</code></pre>

<p>PHP 5.3:</p>

<pre><code class="php">&lt;?php printf('%f', pow(2,$argv[1])); ?&gt;
</code></pre>

<p>The Bash script to rule them all:</p>

<pre><code class="bash">echo 'C++ Compile and Run:'
time { g++ 2powX.cpp -o 2powX; ./2powX $1; }
echo ''
echo 'C++ Run-only:'
time { ./2powX $1; }
echo ''
echo 'Python3:'
time { python3 2powX.py $1; }
echo ''
echo 'PHP 5.3:'
time { php 2powX.php $1; }
</code></pre>

<p>To start the test, I just need to think of a large number (under 1024 to be fair to C++ and PHP):</p>

<pre><code class="bash">./2powX.sh 1023
</code></pre>

<p>(this will calculate 2^1023)</p>

<p>My output:</p>

<pre><code class="bash">C++ Compile and Run:
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608.000000

real 0m0.393s
user 0m0.051s
sys 0m0.029s

C++ Run-only:
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608.000000

real 0m0.023s
user 0m0.007s
sys 0m0.001s

Python3:
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608

real 0m0.297s
user 0m0.000s
sys 0m0.048s

PHP 5.3:
89884656743115795386465259539451236680898848947115328636715040578866337902750481566354238661203768010560056939935696678829394884407208311246423715319737062188883946712432742638151109800623047059726541476042502884419075341171231440736956555270413618581675255342293149119973622969239858152417678164812112068608.000000

real 0m0.158s
user 0m0.032s
sys 0m0.001s
</code></pre>

<p>I am tossing out the “real” time since that can be affected by other processes. “User” and “sys” show time the CPU devoted to running those individual scripts. As such, the times for this one run can now be rewritten as:</p>

<pre><code class="bash">C++ Compile and Run:
User + Sys: 0m0.080s

C++ Run-only:
User + Sys: 0m0.008s

Python:
User + Sys: 0m0.048s

PHP 5.3:
User + Sys: 0m0.033s
</code></pre>

<p>So, as can be seen the limited test above, Python is fairly whippy, but it is much slower than compiled C++ and only slightly slower than PHP. As should be expected, the clear loser is C++ when compiling and running the script.</p>

<p>Where Python shows its strength in this test is when I chose an exponent greater than 1023: 10230.</p>

<pre><code class="bash">C++ Compile and Run:
inf

real 0m0.300s
user 0m0.031s
sys 0m0.042s

C++ Run-only:
inf

real 0m0.019s
user 0m0.005s
sys 0m0.000s

Python3:


real 0m0.291s
user 0m0.045s
sys 0m0.023s

PHP 5.3:
INF

real 0m0.173s
user 0m0.006s
sys 0m0.019s
</code></pre>

<p>C++ and PHP return “inf” or “INF”, which means the output was too great for the number type to handle. I could have fixed that by using additional or third-party libraries (ex. “gmp” in <a href="http://gmplib.org/">C++</a> and <a href="http://php.net/manual/en/book.gmp.php">PHP</a>), but that wouldn’t have been fair for this test. Without having to import any special libraries, Python was itching to output any number-size calculation I wanted to throw at it. If it calculated 2^10230 in 0.068s, how long would it take to calculate 2^10230000? 2m21.530s, but I won’t print the output here since it takes 3,079,537 characters to show.</p>

<p>So what did I learn from this limited test? Python is slower to run than compiled C++ and just a little slower than PHP 5; however, it is also much easier to get the information I need with Python out of the gate without having to include or import additional libraries, third-party or not. Python is definitely a language I will continue to explore.</p>
]]></content>
        </entry>
    </feed>