<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/blog/tags/git.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2015-07-09T08:26:49+00:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Now with Sculpin]]></title>
            <link href="http://ericpoe.com/blog/2014/12/28/now-with-sculpin"/>
            <updated>2014-12-28T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2014/12/28/now-with-sculpin</id>
            <content type="html"><![CDATA[<p>I have moved my site from one domain to another. I was using Wordpress on my old
site and was happy. Adding pages was a thing of beauty. Configuring was a dream.
Then I wanted to modify my theme. Then I wanted to use some fun HTML5 tags. Then
I wanted to minimize hacking vectors. Then I realized that I was sacrificing
performance to use a database that I was merely using to dynamically create static
content... why?</p>

<p>If only Wordpress were as performant and easy to theme as the first blog I cobbled
together using static PHP files back in the early aughts. Ah, that first blog
was easy to add funky HTML syntax and add features; but each new page required
editing 3 PHP files so the menu, archive, and each individual page would use the
new content. At one point, I figured out that if I used a common naming structure,
that I could tell the menu to dynamically build by looking at the file structure
 &mdash; thereby reducing the need to edit the menu.php file. Success!</p>

<p>I muddled through with Wordpress (did I mention the constant need to stay on top
of updates and patches for Wordpress and associated plugins?). Then I discovered
<a href="https://sculpin.io">Sculpin</a>.</p>

<p>The immediate benefits to Sculpin that I could see were:</p>

<ul>
<li>Static file generator</li>
<li>Files are created using <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, which means I can add funky HTML tags when necessary.</li>
<li>The base project is written in open-source PHP, which means that I can bugfix and extend the source as I see fit.</li>
<li>Theming is done via <a href="http://twig.sensiolabs.org/">twig</a> &amp; CSS (currently using <a href="http://getbootstrap.com/">bootstrap</a>)</li>
<li>No performance loss due to dynamically generating a view via database lookups.</li>
<li>Nice community (a huge bonus!)</li>
</ul>

<p>In other words, the benefits are that I can utilize it now and benefit, I learn
its components now and I can utilize that knowledge later (CSS, Bootstrap, twig,
HTML5, etc).</p>

<p>As I started to play with Sculpin, I kept thinking back to my original blog and
how close I was back then to what I am now doing. What I was missing then was the
generation of the static HTML files that Sculpin allows.</p>

<h3 id="making-it-work">Making it work</h3>

<p>I spent too much time this weekend trying to figure out how to edit my Sculpin
site locally and yet keep that version-controlled via git as well as keeping my
production code version-controlled via git. Happily, I believe that I have found
a way to do both.</p>

<p>I keep my in-progress code, which includes minor modifications to the <a href="https://github.com/sculpin/sculpin-blog-skeleton">blog
skeleton</a>, in a Bitbucket repo.
I keep my production site, which is generated by Sculpin, in a Github repo, which
is actually what you are reading right now. To keep the two segments segregated,
I am doing the following:</p>

<p>On my dev machine, I have the following directory structure:</p>

<pre>
+-ericpoe\
|
+-+- ericpoe.sculpin\
  |
  +-- ericpoe.github.io\
</pre>

<p>Within my <code>ericpoe.sculpin</code> directory, I keep my sculpin blog skeleton and my Markdown source files. I have two remotes: <code>origin</code>, which points to my draft on <a href="https://bitbucket.org/ericpoe/">bitbucket</a>, and <code>sync</code>, which points to the source of the <a href="https://github.com/sculpin/sculpin-blog-skeleton">Sculpin blog skeleton</a>.</p>

<p>Within my <code>ericpoe.github.io</code> directory, I keep the html files generated by the <code>sculpin generate --env=prod</code> command.</p>

<p>Tying it all together, I keep three bash files in my root <code>ericpoe</code> directory:</p>

<p><code>sync.sh</code>:</p>

<pre><code class="bash">#! /bin/bash
cd ericpoe.sculpin
git checkout master
git pull sync master
</code></pre>

<p><code>draft.sh</code>:</p>

<pre><code class="bash">#! /bin/bash
if [ $# -ne 1 ]; then
    echo "usage: ./draft.sh \"commit message\""
    exit 1;
fi

cd ericpoe.sculpin
git checkout master
git add .
git commit -m "$1"
git push -u origin master
</code></pre>

<p><code>publish.sh</code>:</p>

<pre><code class="bash">#! /bin/bash

if [ $# -ne 1 ]; then
    echo "usage: ./publish.sh \"commit message\""
    exit 1;
fi

cd ericpoe.sculpin
sculpin generate --env=prod

cd ../ericpoe.github.io
git checkout master

cp -R ../ericpoe.sculpin/output_prod/* .

git add .
git commit -m "$1"
git push origin --all
</code></pre>

<p>My workflow now is to:</p>

<ol>
<li>create a new Markdown file with the yaml tuple <code>draft: true</code></li>
<li>create my text</li>
<li>test my text via <code>sculpin generate --watch --server</code></li>
<li>make any changes needed</li>
<li>backup the draft by running <code>draft.sh</code></li>
<li>if I feel ready, remove the yaml tuple <code>draft: true</code></li>
<li>publish to my site, which is hosted by github, by running <code>publish.sh</code></li>
<li>every now and then, when the need strikes, update the core code by running <code>sync.sh</code></li>
</ol>

<p>This simple workflow will allow me to explore other technologies and to concentrate on the topic-at hand while posting about it here.</p>
]]></content>
        </entry>
    </feed>