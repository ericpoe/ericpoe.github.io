<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/blog/tags/php.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2016-01-26T22:21:09-06:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Playing with Docker and Linked Containers]]></title>
            <link href="http://ericpoe.com/blog/2016/01/26/playing-with-docker"/>
            <updated>2016-01-26T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2016/01/26/playing-with-docker</id>
            <content type="html"><![CDATA[<p>In my current job, I am starting the process to upgrade our PHP 5.4 application to a PHP 5.6 application (PHP 7 is not yet support by the majority of the 3rd party libraries we use). I have been tasked with building the staging server for use in testing our legacy application as well as our newer Symfony-based application. We are using an older version of MySQL as well.</p>

<p>At some point, we will want to experiment with PHP 7.x and later versions of MySQL or MariaDB. Yet, will we want to build a brand new server each time?</p>

<p>This seems like a perfect opportunity to play with <a href="http://docker.io">Docker</a>.</p>

<p>I had first looked at Docker a little over a year ago. I had tried to build a dev environment entirely from Docker, but it and I were not yet ready for each other. I could not see Docker as anything other than another way to launch a Vagrant box for development.</p>

<p>This weekend, I looked at Docker again. Now Docker includes a feature called "<a href="https://docs.docker.com/compose/">Docker Compose</a>." This allows one to build a Docker manifest within a YAML file rather than as a complex command-line string.</p>

<p>I played. I looked at building a new Drupal 8 box with a separate MySQL server. As a docker-compose YAML file, this is pretty straight-forward:</p>

<p><code>docker-compose.yml</code></p>

<pre><code class="yaml">drupal8:
  image: drupal
  links:
    - drupal_database:mysql
  ports:
    - 8085:80
drupal_database:
  container_name: drupal_database
  image: mariadb:5.5
  environment:
    MYSQL_ROOT_PASSWORD: examplepass
    MYSQL_USER: user
    MYSQL_PASSWORD: password
    MYSQL_DATABASE: drupal_db
</code></pre>

<p>The above creates two Docker machines: "drupal8" and "drupal_database." The "drupal8" Docker machine is linked to the "drupal_database" which is running MariaDB 5.5. To launch this, I just run <code>docker-compose up</code> from the directory that contains this <code>docker-compose.yml</code> file. This is the equivalent to running:</p>

<pre><code>docker run --name drupal_database \
  -e MYSQL_ROOT_PASSWORD=examplepass \
  -e MYSQL_USER=user \
  -e MYSQL_PASSWORD=password \
  -e MYSQL_DATABASE=drupal_db \
  -d mariadb:5.5

docker run --name drupal8 \
  -p 8085:80 \
  --link drupal_database:mysql \
  -d drupal
</code></pre>

<p>I was able to come up with a working <code>docker-compose.yml</code> file within 30 minutes. It took me much longer to come up with the right <code>docker run</code> statements to make two Docker containers and have the Drupal container link to the MySQL container. Natch, had I read further down the <a href="https://hub.docker.com/_/drupal/">Docker Hub Drupal page</a>, I would have been given a huge clue as to how to connect the two; I just needed to add the appropriate port. Nonetheless, the YAML is much easier me to configure and update than the two <code>docker run</code> commands are.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Last Month in PHP: 2015 December]]></title>
            <link href="http://ericpoe.com/blog/2016/01/06/last-month-in-php"/>
            <updated>2016-01-06T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2016/01/06/last-month-in-php</id>
            <content type="html"><![CDATA[<p>From a <a href="http://kcpug.org/">KCPUG</a> lightning talk given on <a href="http://www.slideshare.net/poeeric/last-month-in-php-december-2015">06 Jan 2016</a></p>

<p>December was a busy month in PHP. A major update to PHP was released,
PHP-FIG approved a new PSR, major CMSes had major releases and/or were patched,
and frameworks had major, minor, and patch releases.</p>

<h3 id="php-7.0.1">PHP 7.0.1</h3>

<p>PHP 7.0 was released on 3 December and was patched to 7.0.1 two weeks later.
PHP 7 includes many new improvements, including:</p>

<ul>
<li>speed!</li>
<li>Scalar type hinting</li>
<li>Return type declarations (optional)</li>
<li>New operators:

<ul>
<li>Null coalescing: <code>??</code></li>
<li>Spaceship: <code>&lt;=&gt;</code></li>
</ul></li>
<li>Constant arrays</li>
<li>Anonymous classes</li>
</ul>

<p>See <a href="http://php.net/manual/en/migration70.new-features.php">PHP 7 New Features</a> for more information.</p>

<h3 id="psr-6-caching-interface">PSR-6 Caching Interface</h3>

<p>PSR-6 ensures a common interface for caching support in PHP, for those libraries and frameworks that utilize it.</p>

<ul>
<li>Allows free-standing libraries to support caching of intermediary data without effort.</li>
<li>Provides a common interface for basic and intermediate-level caching needs.</li>
</ul>

<p>On 8 December, this passed <a href="https://www.reddit.com/r/PHP/comments/3vzvxo/psr6_the_vote_for_psr6_has_passed_in_favor_of/">amidst controversy</a>.</p>

<p>See <a href="http://www.php-fig.org/psr/psr-6/">PSR-6</a> for more information.</p>

<h3 id="wordpress-4.4%3A-%22clifford%22">WordPress 4.4: "Clifford"</h3>

<p>On 8 December, the new version of WordPress, <abbr title "also known as">aka</abbr> "Clifford", was released.</p>

<p>Some of its new features:</p>

<ul>
<li>Theme: <a href="https://wordpress.org/themes/twentysixteen/">Twenty-Sixteen</a></li>
<li>Responsive images</li>
<li>Ability to <a href="https://codex.wordpress.org/Embeds">embed posts</a> from:

<ul>
<li>Other WordPress sites</li>
<li>Other oEmbed providers (reddit, speaker deck, etc)</li>
</ul></li>
<li><a href="https://wordpress.org/plugins/rest-api/">WordPress REST API</a> in Core</li>
<li>Other stuff under-the-hood</li>
</ul>

<p>WordPress 4.4 requires PHP 5.2.4+, although <a href="https://wordpress.org/about/requirements/">PHP 5.6+</a> is recommended.</p>

<p>See: <a href="https://wordpress.org/news/2015/12/clifford/">WordPress 4.4 announcement</a> for more information.</p>

<h3 id="drupal-8.0.1">Drupal 8.0.1</h3>

<p>Drupal 8 was released on 19 November and the first patch was released on 2 December.</p>

<p>New features of Drupal 8 include:</p>

<ul>
<li>HTML 5</li>
<li>Out-of-the-box WYSIWYG editing</li>
<li>Built with modern PHP practices &amp; Libraries:

<ul>
<li>Composer, Symfony2, Guzzle, Twig, etc.</li>
</ul></li>
<li>REST web services</li>
</ul>

<p>Drupal 8 requires PHP 5.5.9+.</p>

<p>See <a href="https://www.drupal.org/8">Drupal 8</a> for more information.</p>

<h3 id="slim-3.0-microframework">Slim 3.0 Microframework</h3>

<p>Slim 3.0 was released on 7 December.</p>

<p>New features of Slim 3.0 include:</p>

<ul>
<li><a href="http://www.slimframework.com/docs/concepts/di.html">Dependency Injection Container</a></li>
<li><a href="http://www.slimframework.com/docs/concepts/middleware.html">PSR-7 Middleware</a> support</li>
<li><a href="http://www.slimframework.com/docs/objects/router.html#route-callbacks">Route callback binding</a></li>
<li>Simpler codebase</li>
</ul>

<p>Slim 3.0 requires PHP 5.5+</p>

<h3 id="symfony-framework">Symfony framework</h3>

<p>Symfony 3.0 was released on 30 November and was patched to 3.0.1 on 26 December.</p>

<p>New features of Symfony 3 include:</p>

<ul>
<li>Locale has been supplanted by Intl</li>
<li>Simplified security</li>
<li>Simplified voters</li>
<li>Monolog Bridge is now <a href="http://www.php-fig.org/psr/psr-3/">PSR-3</a> compatible</li>
<li>Changes in the ways Property Access, Routing, Logging, Translator, Twig, Validator, Yaml, Process, &amp; Swiftmailer, Config, &amp; more are used</li>
</ul>

<p>Symfony 3 requires PHP 5.5.9+</p>

<p>Patches:</p>

<ul>
<li>Symfony 3.0.1</li>
<li>Symfony 2.8.1</li>
<li>Symfony 2.7.8</li>
<li>Symfony 2.3.36</li>
</ul>

<h3 id="laravel-5.2-framework">Laravel 5.2 framework</h3>

<p>Laravel 5.2 was released on 21 December.</p>

<p><a href="https://laravel-news.com/2015/12/laravel-5-2-is-released/">New features of Laravel 5.2</a> include:</p>

<ul>
<li>Auth Scaffolding</li>
<li>Implicit model bindingAppending output from scheduled tasks</li>
<li>Form array validation</li>
<li>Collections wildcards</li>
<li>Database Session Driver</li>
<li>Middleware Groups</li>
<li>Rate Limiting</li>
<li>Eloquent Global Scope</li>
</ul>

<h3 id="virtual-machine%3A-laravel-homestead-5.2">Virtual Machine: Laravel Homestead 5.2</h3>

<p>Now with:</p>

<ul>
<li>PHP7</li>
<li>Composer</li>
<li>git</li>
</ul>

<p>Requires PHP 5.5.9+</p>

<p>See: <a href="https://laravel.com/docs/5.2/homestead">Homestead 5.2</a></p>

<h3 id="upcoming-conferences">Upcoming Conferences</h3>

<p><a href="http://2016.sunshinephp.com/">Sunshine PHP</a>
Feb 4-6: Miami, FL</p>

<p><a href="http://2016.midwestphp.org/">Midwest PHP</a>
Mar 4-5: Minneapolis, MN</p>

<p><a href="http://lonestarphp.com">Lonestar PHP</a>
Apr 7-9: Dallas, TX</p>

<p><a href="https://tek.phparch.com">php[tek]</a>
May 23-27: St Louis, MO</p>

<h3 id="nomadphp">NomadPHP</h3>

<p><a href="http://nomadphp.com">NomadPHP</a> is an online supplement to your in-real-life user group.</p>

<p>Jan 21: 01:00 PM CST
<a href="https://nomadphp.com/2015/10/16/puli-phps-next-package-revolution/">Puli: PHP's Next Package Revolution</a>
- Berhard Schussek - <a href="https://twitter.com/webmozart">@webmozart</a></p>

<p>Jan 21: 08:00 PM CST
<a href="https://nomadphp.com/2015/10/16/building-better-apis/">Building Better APIs</a>
- Mike Stowe - <a href="https://twitter.com/mikegstowe">@mikegstowe</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[My Year of Code]]></title>
            <link href="http://ericpoe.com/blog/2015/11/13/my-year-of-code"/>
            <updated>2015-11-13T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2015/11/13/my-year-of-code</id>
            <content type="html"><![CDATA[<p>2015 was my year to really dive into PHP. Up until this year, PHP was  hobby language for me -- much as Python, Haskell, C++, Dart, JavaScript, and Java have been hobby languages. Granted, last year I finally took a job where PHP is where I spend half of my time.</p>

<p>This year, I took up intensive study of PHP. At the beginning of the year, I poured over the <a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey. I even passed the <a href="http://www.zend.com/en/services/certification/php-5-certification">Zend Certified PHP Engineer exam</a> and earned my <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certification</a>. I also took up more of a leadership role in my local PHP user group, <a href="http://www.meetup.com/kcphpug/">KCPHPUG</a>, gave a few talks, and have been hosting meetups both at work and at a local café. In the late Spring/early Summer, I began work on a PHP library called <a href="https://github.com/ericpoe/ophp">OPHP</a>. In April, I attended the <a href="http://lonestarphp.com/">Lone Star PHP conference</a> and got to meet and hang out with quite a few luminaries of the community.</p>

<p>I think I can safely say that 2015 has been a year of PHP for me.</p>

<p>For next year, my language of intensive study will be JavaScript. No matter who I talk with about programming, JavaScript seems to be the <em>lingua franca</em> of web programming. I have already started to look deeply into Sencha's <a href="https://www.sencha.com/products/extjs">Ext JS</a>, which is the JavaScript framework we use at work. <a href="http://es6-features.org/">EcmaScript 6</a> has piqued my interest since it was ratified in June. I have also been interested in learning more about <a href="https://nodejs.org">node</a> since it has usage in <a href="http://electron.atom.io/">Atom Electron</a> and beyond.</p>

<p>By this time next year, I hope to have a native comfort in JavaScript.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP&#039;s Array_Filter Oddity]]></title>
            <link href="http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity"/>
            <updated>2015-07-08T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity</id>
            <content type="html"><![CDATA[<p>I was studying the <a href="http://php.net/manual/en/function.array-filter.php"><code>array_filter</code></a> in PHP and was enjoying coming up with a test that could help me learn better <code>array_filter</code> magic. For instance, to filter all words whose first letter is a vowel, I created this PHPUnit test:</p>

<pre><code class="php">public function testFilterVowelWords()
{
    $vowel = function ($word) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($word[0], $vowels);
    };

    $words = ["apple", "baby", "cookie", "danger", "element", "fountain", "grape"];

    $vowelWords = array_filter($words, $vowel);

    $this-&gt;assertEquals(["apple", "element"], array_values($vowelWords));
}
</code></pre>

<p>So, yay <code>array_filter</code>! But wait, what's this? There's an optional flag for <code>array_filter</code> that was introduced in PHP 5.6? It allows one to filter by array key, or if one is completely nuts, by both array value and array key. Woah.
<img src="https://s3.amazonaws.com/giphymedia/media/yUIktdHUIamcg/giphy.gif"></p>

<p>So, if one were to filter by key, easy-peasy. The flag is <code>ARRAY_FILTER_USE_KEY</code>:</p>

<pre><code class="php">public function testFilterVowelWordsByKey()
{
    $vowel = function ($key) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($key, $vowels);
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $vowel, ARRAY_FILTER_USE_KEY);

    $this-&gt;assertEquals(["a"=&gt;"apple", "e"=&gt;"element"], $vowelWords);
}
</code></pre>

<p>So, if one wanted to filter by key AND value, the flag would be <code>ARRAY_FILTER_USE_BOTH</code>, right?</p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($key, $value) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($key, $vowels)) {
            return true;
        } else {
            return (in_array($value[1], $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yet, epic fail!</p>

<p>The <code>ARRAY_FILTER_USE_BOTH</code> flag requires the order: <code>value</code> then <code>key</code> NOT <code>key</code> then <code>value</code></p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($value, $key) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($value[1], $vowels)) {
            return true;
        } else {
            return (in_array($key, $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yay! This test passes! But, what the heck? Why <code>value</code> then <code>key</code>? Every time we read about <code>key =&gt; value</code> pairs, it's in the order of <code>key</code> then <code>value</code>. Yet, this is <code>value</code> then <code>key</code>. What gives?</p>

<p>I looked into this. I couldn't find any <a href="https://wiki.php.net/rfc">RFCs</a> recommending this order. I even checked PHP internals discussions and saw the question raised of <a href="http://marc.info/?l=php-internals&amp;m=137159339704961&amp;w=2">which should come first, key or value</a>, but the question doesn't get answered. Eventually, we get a statement of (paraphrased)<a href="http://marc.info/?l=php-internals&amp;m=138023845322301&amp;w=2">"Hey, having flags for using key or using both key &amp; value is great, I'll add it."</a>. The <a href="https://github.com/php/php-src/pull/287">pull request</a>, though it contains discussion on adding this flag, doesn't contain any discussion on parameter order. The <a href="https://github.com/php/php-src/blob/master/ext/standard/array.c#L4803">source code</a> does not contain enough documentation to give an inkling as to why this is.</p>

<p>I struggled to figure out a good reason for <code>value</code> to come before <code>key</code> when using the <code>ARRAY_FILTER_USE_BOTH</code> flag. In desperation, I reached out to the PHP Internals dev who implemented this feature, Tjerk Meesters (aka '<a href="https://twitter.com/datibbaW">datibbaw</a>'). As an exemplar of where the amazing PHP community shines, Tjerk responded within minutes with helpful background information on this feature. First, this feature was designed to not break existing implementations of <code>array_filter</code>. Adding <code>key</code> as the second parameter seemed to be the most polite way to do this. Secondly, this is the same order as used in JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a>. Boom.</p>

<p>The way I justify the order is by looking at the original intent of <code>array_filter</code> -- it was designed to filter an array based on the values contained within that array. So, value is first and foremost the primary thing this function checks against; the key is merely secondary. Therefore, when using the <code>ARRAY_FILTER_USE_BOTH</code> flag, the order of parameters for the callback will be <code>value</code> and then <code>key</code>.</p>

<p>If I were to treat this function as a consumer that turns food into another product, the main food this function eats is the value platter. For dessert, it might choose to eat a key lime pie. Or it might decide to order the full course and ask for both the value platter with dessert.</p>

<p>What had seemed like an oddity at first now makes sense in the right frame of mind. If you use <code>array_filter</code>, remember that it is all about the array <code>value</code>. If you want to include the <code>key</code> in the filter, know that <code>key</code> is always secondary to the original intent.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Leveled Up: PHP Certified]]></title>
            <link href="http://ericpoe.com/blog/2015/05/08/php-certified"/>
            <updated>2015-05-08T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/05/08/php-certified</id>
            <content type="html"><![CDATA[<p>On Wednesday, I took an extended lunch break in order to take the Zend PHP Certification test at a local Pearson VUE Testing Center.</p>

<p>After a few years of using PHP and studying for a few months, I am a <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certified PHP Engineer</a>!</p>

<p>Books that have helped me:</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920012443.do">Programming PHP, 3rd Ed</a> by Kevin Tatroe, Peter MacIntyre, &amp; Rasmus Lerdorf</li>
<li><a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey</li>
<li>Reviewing the  <a href="https://www.zend.com/en/services/certification/php-certification-study-guide">Zend PHP Certification Study Guide</a> and doing the problems contained within.</li>
</ul>

<p>People who have helped me along the way:</p>

<ul>
<li>My wife.</li>
<li>My kids.</li>
<li>My mentor and fellow KCPUG co-organizer, <a href="http://johnkary.net">John Kary</a></li>
<li>KCPUG leader <a href="https://twitter.com/dan_holmes/">Dan Holmes</a> and the great members of the <a href="http://www.meetup.com/kcphpug/">KCPUG</a>.</li>
<li><a href="http://blog.calevans.com/">Cal Evans</a> and the great speakers at <a href="http://nomadphp.com/">NomadPHP</a>.</li>
<li><a href="http://www.geekyboy.com/">Adam Culp</a> for giving me the push at Lone Star PHP 2014.</li>
</ul>

<p>Practices that have help me:</p>

<ul>
<li>ABC: Alway be coding!</li>
<li>Added an hour appointment to my calendar every day, after the kids were in bed, to study.</li>
<li>Watched NomadPHP talks (live, recorded, or <a href="https://www.youtube.com/channel/UCYHDBrzJ5o5d97KlCAUhICA">on Youtube</a>)</li>
<li>Listen to various podcasts about programming, not all about PHP</li>
<li>Practiced</li>
<li>Kata</li>
<li>Present at KCPUG (forced me to really think about the how and why)</li>
<li>Followed my curiosity in code</li>
</ul>

<p>These practices and personal connections will continue long after my certification studies ended. I'm looking forward to the next leg of the journey.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lone Star PHP 2015]]></title>
            <link href="http://ericpoe.com/blog/2015/04/28/LoneStarPHP2015"/>
            <updated>2015-04-28T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/04/28/LoneStarPHP2015</id>
            <content type="html"><![CDATA[<p>I attended Lone Star PHP <a href="/blog/2014/05/06/Lonestar-PHP-Conference-2014">last year</a> with much hope and even more trepidation as to my abilities to hold my own with other members of the PHP community. I was the recipient of the Lone Star PHP scholarship, so my attendance and stay were taken care of by the conference sponsors (thank you! thank you! thank you!). I spent a day at an intro-to-PHP workshop, where I realized that I knew more about modern PHP and its practices than I cared to admit. I spent another day attending great talks. I met many wonderful folks, some of whom I have maintained contact and some PHP luminaries I follow on Twitter, blog posts, and podcasts. Since I had accepted a job offer while doing the TSA dance at DFW airport, I spent my evenings leaving the after-parties early to work on my resignation letter.</p>

<p>This year was my sophomore attendance, so I attended with a less timid attitude, a lifetime more of experience, an established and beloved career, and looking forward to the talks I would attend, the friends I would see again, and the new friends I would make. This time, my employer, <a href="http://stowers.org">Stowers Institute for Medical Research</a> sent me (thank you!). This time around, I found that I was able to offer more to the conference than I had before. I connected at least one attendee to his <a href="http://devict.org/">local user group</a>, talked up <a href="http://nomadphp.com/">NomadPHP</a> and <a href="https://coderdojo.com/">CoderDojo</a>, and was able to explain some of the awesomeness of <a href="https://getcomposer.org/">Composer</a>. I also attended great talks and workshops and met some amazing folks.</p>

<p>Lone Star is a regional conference, has world-class talks, and feels like a community. Many of the speakers know each other and hang out together for the several days of the conference (and sometimes even a day or so later). Yet, even though many of the speakers are friends with each other, they are open and welcoming to outsiders like me.</p>

<p>The business value for attending the conference is in the talks themselves. I was able to take concepts from at least two talks and apply them to code I was working on for work the following week. The long-term value will be seen by my employer later as I apply lessons learned from the various intellectual paths opened to me by all of the talks.</p>

<p>The reason I will attend Lone Star again is for what happens outside of the talks. The "hallway track" is a part of this. I attended two talks I didn't expect to attend due to having good conversations with attendees after a talk that <del>were interrupted</del> were followed by a great talk in the same room.</p>

<p>The lunches provided by the conference sponsors were great. Day 0's lunch was off, schedule-wise, in that the line went pretty far back; yet, I had several great conversations with great people while waiting in line, talked with Adam Culp about his long-distance running and learned of his new <a href="https://rungeekradio.com/">podcast</a>, and had Ben Ramsey sign my copy of the 3rd edition of the <a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend Certification Guide</a> (Davey Shafik signed it Saturday night). Friday's lunch was fajitas and Saturday's was Texas BBQ. Yum. Funny aside: on one of the lunches, forks were more popular than were available; so I grabbed two plastic knives and used them like chopsticks to eat my lunch -- I felt like I was epitomizing the <a href="http://blog.codinghorror.com/the-php-singularity/">double-clawed hammer</a> of PHP. Thank you, <a href="http://www.phpdevhired.com/">PHPDevHired</a> and <a href="http://www.robofirm.com/">Robofirm</a> for sponsoring the lunches!</p>

<p>The hallway track at Lone Star was pretty awesome. I met an Austin-based dev team from Whole Foods, user group leaders from around the United States, many Texas-based developers, speakers and other luminaries of the PHP community, and people I had met last year. At one point, I saw various speakers in the hallway and asked if they were "the hallway track or the rogue's gallery;" one responded that they were in detention.</p>

<p>The after-parties were low key and were largely an extension of the hallway track. <a href="http://omni-spot.blogspot.com/">Omni Adams</a> provided his awesome homebrew beers -- incredibly, they have improved from last year's perfection. I missed the <a href="http://looselycoupled.info/">Loosely Coupled</a> podcast Friday night due to being caught up with great conversations with members of the community. Saturday night, I was able to take part in the fun "<a href="https://github.com/jeremeamia/JeoPHPardy">PHP Jeopardy</a>" game, where I forgot everything I knew. I was honored to take part in the "It's the booze talking" edition of the <a href="https://voicesoftheelephpant.com/">Voices of the Elephant</a> podcast. Thank you, <a href="https://www.sparefoot.com/">SpareFoot</a> and <a href="http://www.softlayer.com/">SoftLayer</a> for sponsoring the after-parties!</p>

<p>Following the after-parties, groups of us got together to have dinner, hit a karaoke bar, and in the midst of Dallas thundersqualls, have drinks at the hotel the speakers were staying at and engage in great conversations. (Thank you, OKC <a href="https://twitter.com/jakeasmith">Jake Smith</a> &amp; crew for providing transportation!)</p>

<h3 id="talks-attended">Talks Attended</h3>

<p>These are the talks I attended. My (and others') reviews are included in the links. These first two talks (ok, workshops) are reviewed at <a href="/blog/2015/04/27/LoneStarPHP-Day-0">Lone Star PHP 2015: Day 0 - Training Day</a></p>

<ul>
<li><a href="https://joind.in/talk/view/13536">Getting Started with PHP Unit</a> - Matt Frost</li>
<li><a href="https://joind.in/talk/view/13539">Wax On, Wax Off: Coder Dojo</a> - Rabbi Yitzchok Willroth</li>
<li><a href="https://joind.in/talk/view/13543">Architecting with Queues for Scale, Speed, and Separation</a> - Sandy Smith</li>
<li><a href="https://joind.in/talk/view/13544">Caching Strategies</a> - Ben Ramsey</li>
<li><a href="https://joind.in/talk/view/13546">Dependency Injection, Dependency Inversion, and You</a> - Jeff Carouth</li>
<li><a href="https://joind.in/talk/view/13549">Talmudic Maxims to Maximize Your Growth as a Developer</a> - Rabbi Yitzchok Willroth</li>
<li><a href="https://joind.in/talk/view/13553">Object-Oriented JavaScript (yes, it really exists)</a> - Jordan Kasper</li>
<li><a href="https://joind.in/talk/view/13555">It Feels Great to Iterate</a> - Jeremy Lindblom</li>
<li><strong>Keynote:</strong> <a href="https://joind.in/talk/view/13558">Teaching Kids to Fail</a> - Maurya Couvares</li>
<li><a href="https://joind.in/talk/view/13560">Refactoring Legacy Code</a> - Adam Culp</li>
<li><a href="https://joind.in/talk/view/13563">Debuggin Zen</a> - Ben Ramsey</li>
<li><a href="https://joind.in/talk/view/13566">Functional PHP</a> - Larry Garfield</li>
<li><a href="https://joind.in/talk/view/13562">Building Extraordinary Packages</a> - Phil Sturgeon</li>
<li><a href="https://joind.in/talk/view/14411">Building Rock Solid Software in the Real World</a> - Omni Adams</li>
<li><a href="https://joind.in/talk/view/13575">Don't Fear the Regex</a> - Sandy Smith</li>
<li><strong>Keynote:</strong> <a href="https://joind.in/talk/view/13576">Turning Your Code Into a Company: The Parts They Don't Tell You</a> - Luke Stokes</li>
</ul>

<p>I had submitted a couple of talks that weren't accepted; yet I did not attend any talks that made me think "they turned my talk down for this?" Even the duds were golden!</p>

<h3 id="conclusion">Conclusion</h3>

<p>This was a great conference. The Dallas PHP community and the Lone Star organizers are to be commended on providing such a great conference. The cost of admission is perfect for those entering PHP development (or attending locally) and the caliber of talks are perfect for those who are presently engaged in PHP development (or attending from afar). The after-parties are great for adults away from their families, yet fun for locals to bring their families.</p>

<p>I met many wonderful people and learned much that will benefit both my employer and myself.</p>

<p>I will be back. Next time, I hope, with a talk in my pocket.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lone Star PHP 2015: Day 0]]></title>
            <link href="http://ericpoe.com/blog/2015/04/27/LoneStarPHP-Day-0"/>
            <updated>2015-04-27T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/04/27/LoneStarPHP-Day-0</id>
            <content type="html"><![CDATA[<p>The first day of Lone Star 2015 was devoted to training. The workshop track I took was geared towards unit testing.</p>

<h3 id="getting-started-with-phpunit">Getting Started with PHPUnit</h3>

<ul>
<li><a href="http://shortwhitebaldguy.com/">Matt Frost</a></li>
<li>Twitter: <a href="https://twitter.com/shrtwhitebldguy">@shrtwhitebldguy</a></li>
<li><a href="http://www.slideshare.net/mfrost503/getting-startedphp-unit">Slides</a></li>
</ul>

<p>One reason I took this workshop was so that I could become more familiar with mocks. I had a mental block when it comes to mocks and had a hard time seeing their value. After taking this workshop and talking about mocks with Matt, I can see and appreciate their value. Mock the things we don't directly test (ex. database connections, sql queries, filesystem i/o, etc) to speed up the individual unit tests. Mock the things we don't directly control (ex. 3rd-party API, access to another server on our network, etc) since we don't want to fail a test due to a temporary connection error.</p>

<p>What I loved about this workshop was the easy-going manner in which Matt got us to embrace unit testing and mocking. Matt even provided a <a href="https://github.com/mfrost503/phpunit-tutorial">git repo</a> for us to clone in order to get started on the fun part of the workshop. Mocking was definitely covered in the interactive part of the workshop.</p>

<p>Unfortunately, our getting started on the interactive portion of the workshop was delayed due to poor wifi signal. By the time most of us were able to get the git repo cloned and run <code>composer install</code>, we only had time to do one of the two mocking exercises. Yet, since I still have the repo cloned on my machine, there's no reason I shouldn't be able to finish the workshop at my leisure.</p>

<h3 id="wax-on%2C-wax-off%3A-coder-dojo">Wax On, Wax Off: Coder Dojo</h3>

<ul>
<li><a href="https://coderabbi.github.io/">Yitzchok Willroth</a></li>
<li>Twitter: <a href="https://twitter.com/coderabbi">@coderabbi</a></li>
<li>Slides unavailable</li>
</ul>

<p>I have <a href="/blog/2014/12/22/a-tdd-fizz-buzz-kata">done kata</a> before and am a proponent of using them to strengthen knowledge and skills, so this was a workshop I had mentally signed up for as soon as I heard it was being offered.</p>

<p>Rabbi Yitzchok Willroth (aka "CodeRabbi") leads his audience with gentle enthusiasm through an intellectual exercise replete with philosophy and references to psychological studies. During this workshop, Coderabbi had a few friends (luminaries of the PHP community, really) float around to offer guidance to the perplexed during each kata exercise. Their assistance was much appreciated.</p>

<p>The kata we worked on was <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a>. We did not have the remainder of the workshop to work on this kata. Instead, we had 30 minutes (you read that right) to work on it. Since this is not something one can learn the rules to and code in a sitting, this seemed unfair -- like being told that the <a href="http://www.coolrunning.com/engine/2/2_3/181.shtml">Couch-to-5K</a> program we were going to follow is to get off the couch and then run 5 kilometers in 30 minutes. As you can imagine, the beginning runner will not complete 5K in 30 minutes, but eventually will with repeated practice. So, too, can one eventually completely code the Game of Life in 30 minutes with repeated practice. What seemed unfair initially, was really a challenge to us to improve, continuously.</p>

<p>One aspect of this workshop that I enjoyed was that at the end of every 30 minute sprint, we were to discard our previous work and start fresh, but with a new constraint to keep our minds sharp. So the second sprint's constraint was to pair up with someone else and see what we could do together. After 30 minutes, the constraint was to make the Cell or Organism (whatever we called it) class not maintain state.</p>

<p>There were times in these kata exercises in which I felt frustrated or angry. Good! For an intellectual exercise, this is the equivalent to feeling muscle strain and soreness in a weight-resistance exercise.</p>

<p>My first pair-up was with a guy who wanted to do the kata in object-oriented javascript and use HTM5 Canvas. At a PHP conference. Yet, once I embraced that he had a better plan of attack than I did, I enjoyed the learning process of watching someone code in a manner that I do not. In that instance, I was not a good pair-partner since I had nothing to contribute regarding Canvas nor from-scratch OOJS. Yet it was a good exercise.</p>

<p>I enjoyed the intellectual exercise of making the Cell Class stateless in that it gave my pair-partner and me the opportunity to discuss what that meant and how to deal with that constraint. We didn't end up with more than an incomplete sketch (in the form of code), but it got our brain juices flowing.</p>

<p>I plan to play with this kata some more on my own and will add additional rules to perhaps mimic competing organisms in the same space. Or, what if one of these organisms has a completely foreign set of rules (like, perhaps cancer cells)?</p>

<p>We started with a Composer-based <a href="https://github.com/coderabbi/coder-dojo">PHPUnit skeleton</a> and a <a href="http://www.codingdojo.org/cgi-bin/index.pl?action=browse&amp;diff=1&amp;id=KataGameOfLife">complicated kata</a>. We ended up with a newfound respect for the squishy gray stuff between our ears.</p>

<h3 id="conclusion">Conclusion</h3>

<p>This was the first year that Lone Star PHP had a day devoted to training. The problems we all shared with wifi were frustrating, but overcome personally by my attendee-coworker with a call to our IT department to turn on the ability to hotspot our phones (thanks, Darren!). A glance at all the <a href="https://twitter.com/sdawncasey/status/589097774852935680">Wifi access points</a> at the conference center showed that we were not the only ones to do this. But really, for the workshops, wifi wasn't important except for at the beginning of each workshop so we could clone git repos and run <code>composer install</code>.</p>

<p>The night before the workshop, I had built a vagrant box exclusively for use at the conference. <a href="https://twitter.com/juantreminio">Juan Treminio</a>'s (a speaker at Lone Star PHP 2014!) <a href="https://puphpet.com/">Puphpet</a> tool proved to be invaluable for this purpose. Had I been aware of the need to clone git repos and get the required components installed via composer, I would have done so ahead of time.</p>

<p>In short, the workshops were great, yet too much time was wasted by all in doing something that takes maybe a minute on the office or hotel wifi but takes for-frikkin-ever on a shared conference wifi. I would like to see more notice next time for required environments so we can hit the ground running. The topics were great, and I would have loved to have been able to attend them all!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Bite of PHP: Heredoc vs. Nowdoc]]></title>
            <link href="http://ericpoe.com/blog/2015/04/23/heredoc-vs-nowdoc"/>
            <updated>2015-04-23T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/04/23/heredoc-vs-nowdoc</id>
            <content type="html"><![CDATA[<h3 id="heredoc">Heredoc</h3>

<p>Heredoc will define a string of text in a what-you-see-is-what-you-mean type
of format. So, if you want to echo out structured text, like so:</p>

<pre><code class="html">I think that I
    Shall never pay
As much as I
    Have for 2015-04-23
</code></pre>

<p>You would put it in a heredoc like this:</p>

<pre><code class="php">$today = date('Y-m-d');
$poem = &lt;&lt;&lt;HTML
I think that I
    Shall never pay
As much as I
    Have for $today
HTML;

echo $poem;
</code></pre>

<p><strong>output:</strong></p>

<pre>
I think that I
    Shall never pay
As much as I
    Have for 2015-04-23
</pre>

<p>Notice that heredoc can behave like a template and parse any PHP contained within.</p>

<p>Test it out on <a href="http://3v4l.org/GZl9Z">3v4l.org</a>.</p>

<h3 id="nowdoc">Nowdoc</h3>

<p>Nowdoc will define a string of text in a what-you-see-is-what-you-get type of format. So, if you want to show the above example EXACTLY as written, put it in a nowdoc block.</p>

<pre><code class="php">$today = date('Y-m-d');
$poem = &lt;&lt;&lt;'HTML'
I think that I
    Shall never pay
As much as I
    Have for $today
HTML;

echo $poem;
</code></pre>

<p><strong>output:</strong></p>

<pre>
I think that I
    Shall never pay
As much as I
    Have for $today
</pre>

<p>Test it out on <a href="http://3v4l.org/H1YjU">3v4l.org</a>.</p>

<p>Notice that the only difference between the heredoc block and the nowdoc block is that the nowdoc block's name is enclosed within single-quotes. For me, the single-quotes makes it easy to remember which block is literal and which block is rendered, just like the <a href="/blog/2015/03/04/double-vs-single-quote-echo/">difference between echoing single-quotes and double-quotes</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Bite of PHP: Double vs Single Quote Echo]]></title>
            <link href="http://ericpoe.com/blog/2015/03/04/double-vs-single-quote-echo"/>
            <updated>2015-03-04T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2015/03/04/double-vs-single-quote-echo</id>
            <content type="html"><![CDATA[<p>In PHP, we have two ways of formatting an echo statement: we can choose to
use single-quotes or double-quotes. The choice is less dependent upon which
side of the Atlantic we learned to read and more dependent upon what we hope
to accomplish with echoing that string.</p>

<p>If you want to echo the string without parsing it, use single-quotes. If you
want to parse the string while echoing it, use double-quotes. Observe:</p>

<p><strong>Single-Quote Example</strong></p>

<pre><code class="php">$greeting = "Howdy";
$audience = "World";
echo '$greeting, $audience';
</code></pre>

<p><em>Output:</em> <code>$greeting, $audience</code></p>

<p><br></p>

<p><strong>Double-Quote Example</strong></p>

<pre><code class="php">$greeting = "Howdy";
$audience = "World";
echo "$greeting, $audience";
</code></pre>

<p><em>Output:</em> <code>Howdy, World</code></p>

<p><br></p>

<p>What if you want to add a character to the output of one of those variables?
Just enclose the variable in a curly bracket!</p>

<p><strong>Special Double-Quote Example</strong></p>

<pre><code class="php">$greeting = "Howdy";
$audience = "World";
echo "$greeting, {$audience}!";
</code></pre>

<p><em>Output:</em> <code>Howdy, World!</code></p>

<p><br></p>

<p>Test it out on <a href="http://3v4l.org/XnKdK">3v4l.org</a>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[TDD Kata]]></title>
            <link href="http://ericpoe.com/blog/2014/12/22/a-tdd-fizz-buzz-kata"/>
            <updated>2014-12-22T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2014/12/22/a-tdd-fizz-buzz-kata</id>
            <content type="html"><![CDATA[<h3 id="kata">Kata</h3>

<p>Kata are a series of movements which, when repeated, migrate mindful action into
muscle memory. An example kata is performed by <a href="http://youtu.be/iiiznDpoapQ?t=50s">Rika Usami</a>
of Japan during the 2012 World Karate Championship in Paris.</p>

<p>Kata can be thought of in terms of playing an instrument or a craft. During the
warmup before a concert, listen to the musicians. They are playing their scales
and odd passages, they are practicing their kata to get their brains and fingers
in the right place to pull off something difficult and awesome.</p>

<p><em>Kata, like scales, are temporary in nature. They are to be practiced, then discarded, then practiced again.</em></p>

<p>Programming also requires practice; kata are a great way to formalize that practice.</p>

<h3 id="tdd">TDD</h3>

<p>Test-Driven Development (aka "TDD") is the practice of writing a test before any
other code is written. Write a test that fails, then write the minimum of code to
pass that test, then write another test that fails, etc. When there are no more
tests to write, then the program is complete. In theory.</p>

<p>The blessing of TDD is that each test is like a public contract: when X is applied, Y shall happen, but
not Z. If a change is made sometime later and the tests still pass, then relief
can be sighed; otherwise, the failed tests right away point out that the recent
change was not appropriate.</p>

<p>The curse of TDD is that it's hard, it takes too much time, quite a few of the
tests are rendered useless over time, and if you start out a project in TDD,
changing direction is rather difficult. <abbr title=" David Heinemeier Hansson">DHH</abbr>
lobbed an anti-TDD bomb in April 2014 with "<a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead. Long live testing.</a>"</p>

<p>These are all valid points, but as Martin Fowler and Kent Beck also said in
<a href="http://youtu.be/gWD6REVeKW4">Is TDD Dead? [Part V &amp; VI]</a>, TDD forces one to approach
a hard problem one small step at a time; once the hugely difficult problem is
reduced to smaller, easier to understand problems, the difficult bits are easier
to approach and figure out. In the same video above, even DHH says that TDD is
the gateway drug to better practices. Similarly, I have read elsewhere and have
heard from several mentors that TDD is also an important step to take in learning
good programming skills. For instance, learning TDD also forces one to learn and
practice <a href="http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29"><abbr title="Single responsibility, Open-closed, Liskov substitution, Interface segregation, and Dependency inversion">SOLID</abbr> principals</a>.</p>

<p>I will admit that at work, our codebase is not test-driven. Yet, we do utilize
unit tests for core features and try to ensure 100% code coverage for those tests.
This helps us feel better that changes we make to the core code will not break the
code (or at least not as much) as compared to anxiety we would fee if we did not
have tests in place.</p>

<h3 id="tdd-kata">TDD Kata</h3>

<p>Given that Kata help drive difficult movement into muscle memory and that TDD is
beneficial to learning good programming practices, I try to incorporate TDD Kata
into my weekly routine.</p>

<p>I use TDD Kata to help me internalize new skills. My latest TDD kata have helped
me learn to use <a href="https://getcomposer.org/">Composer</a>, <a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a>, <a href="https://phpunit.de/">PHPUnit</a>, and basic <accr title="Object Oriented Programming">OOP</accr>.</p>

<p>Some interesting TDD Kata to attempt can be found at the <a href="http://cyber-dojo.org/">Cyber Dojo</a>.
In a near-future post, I will attempt to walk through the TDD Fizz Buzz Kata.</p>

<p>Cheers,<br/>
Eric</p>
]]></content>
        </entry>
    </feed>