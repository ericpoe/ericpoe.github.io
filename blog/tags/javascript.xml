<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/blog/tags/javascript.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2015-05-18T23:04:33-05:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A Fresh Look At Javascript]]></title>
            <link href="http://ericpoe.com/blog/2014/04/07/a-fresh-look-at-javascript"/>
            <updated>2014-04-07T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2014/04/07/a-fresh-look-at-javascript</id>
            <content type="html"><![CDATA[<p>After studying <a href="https://www.dartlang.org/">Dart</a> for a month, I wondered which problems Dart was attempting to resolve. I then realized that my knowledge of JavaScript was not good enough to know why Google had created Dart as a JavaScript alternative. As much as I enjoyed Dart, I decided to dive back in to JavaScript with a fresh look.</p>

<p>A programmer I respect, the inimitable <a href="http://johnkary.net/">John Kary</a>, recommended that I read <a href="http://shop.oreilly.com/product/9780596517748.do">JavaScript: the Good Parts</a> by Douglas Crockford for a different project. Although the book was published nearly 4 years ago, it seems very relevant today. It has me thinking about JavaScript in new ways.</p>

<p>I appreciate that the author does not mince words in regards to the downsides of JavaScript. It is not a perfect language, but which language has achieved perfection? Crockford makes a few suggestions on how to get around or side-step some of the drawbacks of JavaScript.</p>

<p>After reading this book, I realize that JavaScript still deserves a deeper dive. I look forward to the swim.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Data Types]]></title>
            <link href="http://ericpoe.com/blog/2014/03/10/Data-Types"/>
            <updated>2014-03-10T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2014/03/10/Data-Types</id>
            <content type="html"><![CDATA[<p>I took a programming languages class as part of my degree program in college. In that class, we covered the strongly and weakly classifications of languages as well as the static and dynamic classifications of languages. This was a topic that was barely covered by the textbook, so I did not give it much thought at the time.</p>

<p>Since then, I have given the topic of data types much thought.</p>

<h3 id="static-vs-dynamic">Static vs Dynamic</h3>

<p>Understanding the difference between static and dynamic languages is easy. Static variables are explicitly defined. Dynamic variables are implicitly defined.</p>

<h4 id="c%2B%2B-%E2%80%93-static">C++ – Static</h4>

<pre><code class="cpp">    String bookTitle; // will only allow strings and will treat its contents
                      // as strings.
    bookTitle = "Great Expectations"; // only allows strings
    bookTitle = 47; // error
</code></pre>

<h4 id="dart-%E2%80%93-dynamic">Dart – Dynamic</h4>

<pre><code class="dart">    /** Technically, Dart is "optionally typed" in that variables can be
    either static, if defined with a specific type, or dynamic, if defined
    without a specific type, as below. */

    var bookTitle; // no idea what this is yet.
    bookTitle = "Great Expectations" // ah, it’s a String!
</code></pre>

<h4 id="strong-vs-weak">Strong vs Weak</h4>

<p>Definitions are hard to come by for strong and weak typing. Some definitions say that these are defined at run-time or compile-time; but I have not been able to find consensus about which is which. In my research, this appears to change from language to language. In other words, there does not appear to be a formal definition of strong or weak typing. Yet, weakly typed languages appear to be those that allow the mixing of data types that make implicit assumptions regarding the intention of the developer. Strongly typed languages only allow the mixing of data types when they are explicitly cast to the same data type.</p>

<h4 id="php-%E2%80%93-weak">PHP – Weak</h4>

<pre><code class="php">    $num = "4"; // this is an implicitly defined String
                // (dynamic typing in action)
    print( $num + 2 ); // Allowed: 6
</code></pre>

<h4 id="java-%E2%80%93-strong">Java – Strong</h4>

<pre><code class="java">    String num1 = "4";
    int num2 = 2;

    // Not allowed. Throws "Breaking on exception: object of type TypeError"
    print( num1 + num2 );

    // Allowed since num1 is a String and num2 is cast to a String: "42"
    print( num1 + num2.toString());
</code></pre>

<h4 id="strong-vs.-weak-vs.-static-vs.-dynamic">Strong vs. Weak vs. Static vs. Dynamic</h4>

<p>I tend to think of these four types of typing not as discrete definitions but as inclusive adjectives to help describe a language.</p>

<table class="table table-bordered">
  <tr>
    <th>&nbsp;</th>
    <th>STRONG</th>
    <th>WEAK</th>
  </tr>
  <tr>
    <th>DYNAMIC</th>
    <td>Dart</td>
    <td>PHP</td>
  </tr>
  <tr>
    <th>STATIC</th>
    <td>C++, Dart, Java</td>
    <td>C</td>
  </tr>
</table>

<p>“Strong” and “weak” are loaded terms that can be used as a political cudgel by speakers against what they think of as lesser languages. Yes, PHP is a weakly typed language, but it also has <a href="http://www.php.net/manual/en/language.oop5.typehinting.php">type-hinting</a> within OOP, which adds some strength to its weak typing system.</p>

<p>Use “strong” and “weak” with a grain of salt. “Dynamic” and “static” are much more useful terms.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Dart Flight School]]></title>
            <link href="http://ericpoe.com/blog/2014/02/20/Dart-Flight-School"/>
            <updated>2014-02-20T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2014/02/20/Dart-Flight-School</id>
            <content type="html"><![CDATA[<p>This evening, I attended the <a href="https://www.dartlang.org/events/2014/flight-school/">Dart Flight School</a> at the Google Fiber Space in Kansas City.  Dart Flight School is a global event occurring throughout February.</p>

<p>I treated this event as an introduction to the <a href="https://www.dartlang.org/">Dart programming language</a>. I walked in to the event knowing only that Dart was created by Google to be like javascript. What I learned is that Dart is designed to be similar to javascript in that some browsers, like Dartium (a portmanteau of “Dart” and Chromium”) can launch it natively if they have the DartVM; yet for others, for instance all of the currently popular browsers, Dart compiles to a minified javascript.</p>

<p>We looked at a simple text-manipulation application that was very similar to the “<a href="https://www.dartlang.org/codelabs/darrrt/">Darrrt</a>” introduction to the language. We also ran through building a node.js-like web server using Dart. I’ll see if I can find the code from the presenters and will add a link to it to this post.</p>

<p>The <a href="https://www.dartlang.org/tools/editor/">Dart Editor</a> is based on the Eclipse IDE, but is not as bulky.</p>

<p>Dart is now on my list of programming languages and libraries to learn.</p>
]]></content>
        </entry>
    </feed>