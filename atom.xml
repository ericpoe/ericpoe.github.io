<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/atom.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2015-11-29T21:29:52-06:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Dev Expectation vs Dev Reality]]></title>
            <link href="http://ericpoe.com/blog/2015/11/29/dev-expectation-vs-dev-reality"/>
            <updated>2015-11-29T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2015/11/29/dev-expectation-vs-dev-reality</id>
            <content type="html"><![CDATA[<p>I have been a professional developer for over a year and a half now.</p>

<p>About a year ago, my friend and mentor, John Kary, asked me how the job measured up to my expectations. I replied, honestly, that my expectations were met. However, I hadn't given it much thought since I was busy trying to learn so many new things. So, at the time, my expectation was that new developers spend a lot of time learning new things. Expectation: met.</p>

<p>Since that time, I have continued to learn new things, but I have also had time to think about the question more in depth.</p>

<p>I realized that I had many expectations of dev-life while I was studying programming.</p>

<p><strong>Caveat:</strong> Your mileage may vary</p>

<h3 id="expectation-1---programming-is-a-young-man%27s-game">Expectation 1 - Programming is a Young Man's Game</h3>

<p>This was probably my largest fear with changing my career and entering programming as a full-time job. I had read too much about <em>brogramming</em>, sexism, and ageism being rampant in the development world. As a middle-aged dude, I was worried about entering this career that was run by 20-something guys that call each other "bruh."</p>

<h3 id="reality-1---programming-is-open-to-all">Reality 1 - Programming is Open to All</h3>

<p>My first interview for my job was with a female boss and a potential coworker who was older than me and was also female. I have told both of them since that this put my fears to rest and made the rest of the interview-process much easier. My second interview was with the team, which was made up of the female boss, the older-than-me female developer, a younger female developer, a remote guy via robot interface, a younger guy, and my friend, John Kary. Another member of the team was absent due to his grandson being born.</p>

<p>Since that time, we have hired a guy from Pakistan, a slightly younger guy, a slightly older guy, and a much younger guy. I would like to see more women apply for the job openings. Perhaps next time.</p>

<h3 id="expectation-2---programming-requires-uml">Expectation 2 - Programming Requires UML</h3>

<p>My programming classes utilized <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a>, the various textbooks and other programming books also utilized UML. So, I imagined that dev meetings utilized UML on a dry-erase board.</p>

<h3 id="reality-2---learning-requires-uml">Reality 2 - Learning Requires UML</h3>

<p>In various team meetings, 1-on-1 dev meetings, and informal discussions, I have yet to see UML be utilized.</p>

<h3 id="expectation-3---developers-have-a-computer-science-degree">Expectation 3 - Developers Have a Computer Science Degree</h3>

<p>I imagined developer discussions being in some meta-language that incorporated algorithms, Big-O notation, and obscure design patterns.</p>

<h3 id="reality-3---developers-come-from-all-walks-of-life">Reality 3 - Developers Come From All Walks of Life</h3>

<p>Perhaps half of my team has some kind of Computer Science background and degree. Other members of my team have backgrounds in varied subjects from construction to film-studies.</p>

<p>In listening the various podcasts and attending various conferences and user-group meetings, I think that there is no fairly typical developer background. One can expect someone with a computer-science degree, but there are plenty of good developers out there without a degree, much less a computer-science degree.</p>

<h3 id="expectation-4---developers-are-invested-in-their-community">Expectation 4 - Developers Are Invested In Their Community</h3>

<p>I was a member of a developer community a decade before I became a professional developer. I have gone to developer conferences in Kansas City and Dallas and have met with many developers from those communities. I expected that all developers were interested in meeting with and working with developers from their community outside of their 9-to-5 job.</p>

<h3 id="reality-4---developers-come-from-all-walks-of-life">Reality 4 - Developers Come From All Walks of Life</h3>

<p>I know that this is the same as &#35;3; however, it fits here, too.</p>

<p>I have also met plenty of developers whom I have tried to recruit to join a local user group, yet they gave a non-committal "I'll look into it" when pressed. Most developers whom I have met are interested in programming for the 40-hours a week they are contracted to program. Outside of that time, they are interested in pursuing their own interests: wood-working, beer brewing, robot fighting, knitting, parade-float building, running, &amp; etc.</p>

<p>Even for me, family is my number 1 priority. Yet, I devote time to organizing a PHP User Group, planning and mentoring a <a href="http://coderdojokc.com/">CoderDojo</a>, and studying programming concepts and technologies outside of work.</p>

<h3 id="expectation-5---if-you-don%27t-play-reindeer-games%2C-you-don%27t-belong">Expectation 5 - If You Don't Play Reindeer Games, You Don't Belong</h3>

<p>What I knew of programmers is what I knew from media and my nerd friends. <a href="https://cardsagainsthumanity.com/">Cards Against Humanity</a>, Dungeons and Dragons, comic books, video games, Star Wars/Trek, and pop-culture ephemera rule developer society.</p>

<h3 id="reality-5---developers-come-from-all-walks-of-life">Reality 5 - Developers Come From All Walks of Life</h3>

<p>Guess what? Developer !== Dork. You might know some developers who fall into that stereotype, but you probably know others who have interests outside of developer stereotypes.</p>

<p>I have yet to play Cards Against Humanity at work. Yet, I have played it once after a CoderDojo session. I have had several Star Wars/Trek discussions with coworkers, but not all coworkers.</p>

<p>At lunch, we mostly talk about family and recent events in our lives. I have recently started a dev book club with my team for a once-per-week lunch discussion. Some of us gather once per month for <a href="http://nomadphp.com">NomadPHP</a> with a follow-up discussion.</p>

<h3 id="expectation-6---memes-are-huge">Expectation 6 - Memes Are Huge</h3>

<p>Before I got my job, I started reading <a href="https://reddit.com">reddit</a>. One thing that I learned is that memes are huge. So I ran through a bunch of memes on <a href="http://memegenerator.net/">meme generator</a>.</p>

<h3 id="reality-6---memes-are-huge-for-some">Reality 6 - Memes Are Huge for Some</h3>

<p>Memes are memes because they are memes. That's tautology for you.</p>

<p>Memes are drawn from popular culture. So, when I was a kid, saying "This is not the assignment you're looking for" was utilizing a meme. We just didn't call it that. 15 years ago, saying to a friend, "Wassup!" was utilizing a meme. We just didn't call it that.</p>

<p>So now, with the easy usage of <a href="https://en.wikipedia.org/wiki/Emoji">emoji</a> and the <a href="https://bitbucket.org/atlassianlabs/ac-koa-hipchat-sassy"><code>/meme</code></a> command in HipChat, memes are all too easy to utilize in a textual discussion.</p>

<p>Yet, not all of us know what the heck some of these memes mean. And some don't even bother with using memes in textual discussion. Memes tend to be a shibboleth in a team when a team shouldn't require such watch-words or phrases.</p>

<h3 id="expectation-7---programmers-are-a-monoculture">Expectation 7 - Programmers are a Monoculture</h3>

<p>When attending a conference, it's easy to see that the vast majority of attendees are younger white guys. The lines to the men's room are long whereas the lines to the ladies' room are non-existant. All programmers are heavy into nerd-core and oontz-oontz electronic music.</p>

<h3 id="reality-7-%26-conclusion---developers-come-from-all-walks-of-life">Reality 7 &amp; Conclusion - Developers Come From All Walks of Life</h3>

<p>This, I think, is the ultimate expectation. All of the expectations above reflect this expectation.</p>

<p>When I was a CS student, classmates were from various genders, sexual orientations, ethnic backgrounds, races, and religions. This expectation was already smashed.</p>

<p>When I joined the league of professional programmers, I met programmers from all walks of life: programmers who grew up dirt poor and programmers who grew up with plenty; programmers who grew up steeped in nerd-core and programmers who came about it quite accidentally.</p>

<p>I am a middle-aged white guy. Yet, I've only been in this game professionally for 1.5 years. I have a lifetime of experience behind me in jobs &amp; a career other than programming. You could take a glance at me and think that I am the very model of a modern career programmer. Yet, you could not be more wrong.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[My Year of Code]]></title>
            <link href="http://ericpoe.com/blog/2015/11/13/my-year-of-code"/>
            <updated>2015-11-13T00:00:00-06:00</updated>
            <id>http://ericpoe.com/blog/2015/11/13/my-year-of-code</id>
            <content type="html"><![CDATA[<p>2015 was my year to really dive into PHP. Up until this year, PHP was  hobby language for me -- much as Python, Haskell, C++, Dart, JavaScript, and Java have been hobby languages. Granted, last year I finally took a job where PHP is where I spend half of my time.</p>

<p>This year, I took up intensive study of PHP. At the beginning of the year, I poured over the <a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey. I even passed the <a href="http://www.zend.com/en/services/certification/php-5-certification">Zend Certified PHP Engineer exam</a> and earned my <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certification</a>. I also took up more of a leadership role in my local PHP user group, <a href="http://www.meetup.com/kcphpug/">KCPHPUG</a>, gave a few talks, and have been hosting meetups both at work and at a local café. In the late Spring/early Summer, I began work on a PHP library called <a href="https://github.com/ericpoe/ophp">OPHP</a>. In April, I attended the <a href="http://lonestarphp.com/">Lone Star PHP conference</a> and got to meet and hang out with quite a few luminaries of the community.</p>

<p>I think I can safely say that 2015 has been a year of PHP for me.</p>

<p>For next year, my language of intensive study will be JavaScript. No matter who I talk with about programming, JavaScript seems to be the <em>lingua franca</em> of web programming. I have already started to look deeply into Sencha's <a href="https://www.sencha.com/products/extjs">Ext JS</a>, which is the JavaScript framework we use at work. <a href="http://es6-features.org/">EcmaScript 6</a> has piqued my interest since it was ratified in June. I have also been interested in learning more about <a href="https://nodejs.org">node</a> since it has usage in <a href="http://electron.atom.io/">Atom Electron</a> and beyond.</p>

<p>By this time next year, I hope to have a native comfort in JavaScript.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[so much depends upon a fresh doughnut]]></title>
            <link href="http://ericpoe.com/blog/2015/08/12/fresh-doughnut"/>
            <updated>2015-08-12T18:43:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/08/12/fresh-doughnut</id>
            <content type="html"><![CDATA[<figure>
<pre>
so much depends
upon

a fresh dough
nut

glazed with maple
icing

beside the black
coffee.
</pre>
<figcaption>
&mdash; Based on <a href="http://www.poets.org/poetsorg/poem/red-wheelbarrow" target="_blank">The Red Wheelbarrow</a> by William Carlos Williams
</figcaption>
</figure>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Number System: Time for a change?]]></title>
            <link href="http://ericpoe.com/blog/2015/07/16/number-system-time-for-a-change"/>
            <updated>2015-07-16T22:42:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/07/16/number-system-time-for-a-change</id>
            <content type="html"><![CDATA[<p>I have been thinking about numbers for most of my life. It wasn't until I helped my oldest child learn to count to 20 that I thought that the way we count in the English language is silly. There is no logic in our base-10 counting system until we get to 17: "fif teen" (what's a "fif?") is followed by "six teen" (ah, six is a number I recognize!) which is followed by "seven teen" (aha! seven is another number I recognize!). And this got me thinking that surely there's a better way to count.</p>

<p>Soon thereafter, I started finding a better way to count in a chapter of Malcolm Gladwell's book, <a href="http://www.amazon.com/gp/product/0316017930/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0316017930&amp;linkCode=as2&amp;tag=erpo0f-20&amp;linkId=AZHPZTBIYAL52CGL">Outliers</a>. Gladwell posits that <a href="http://gladwell.com/outliers/rice-paddies-and-math-tests/">Chinese-speaking kids can memorize multi-digit numbers much faster than English-speaking kids can</a> since the sequence "4, 8, 5, 3, 9, 7, 6" is made up of monosyllabic words in Chinese and "7" has 2 syllables in English. I would add that since Chinese is a tonal language, this sequence also has its own tune. Quick show of hands, who knows the 7-digit phone number from the Tommy Tutone hit, "<a href="https://www.youtube.com/watch?v=6WTdTwcmxyo">Jenny</a>" from 1981? Do you know that number because you can sing the number or because you can recite the number?</p>

<p>In the same chapter, Gladwell suggests that adding numbers in Chinese is easier than in English because the names of the numbers are more logical in Chinese than in English. For instance, the number 25 is "twenty-five" in English and the equivalent to "two ten five" in Chinese. Aha! Then 11 is "ten 1" in Chinese and 123 is "hundred two-ten three" in Chinese. In English (and <lang = "es">En español</lang> ), the numbers between 11 and 15 are hard to memorize. In Chinese, pshh: "ten one," "ten two," "ten three," "ten four," "ten five."</p>

<p>This made me think that perhaps learning numbers would be easier if we came up with different units. If we were to count "0 - 10" in the standard English manner, then "11 - 19" would be known as "ten one," "ten two," "ten three," &amp; etc. "20 - 29" would be "two-ten," "two-ten one," "two-ten two," "two-ten three," &amp; etc.</p>

<p>Already, "1200" can be read two different ways in English, "One thousand two hundred" and "Twelve hundred.". It wouldn't be too large of a stretch for "1000" to no longer be known as "one thousand" but to be known as "ten hundred." Instead, "10000" would be known as "one thousand." Since the place names are changed in an exponential-growth pattern, this probably should be written as "1,0000" (10^4 or 100 hundreds) instead of "10,000." I could then call 1,0000,0000 "1 million" (10^8 or 1 thousand thousands) instead of "100 million," and 1,0000,0000,0000,0000 (10^16 or 1 million millions) "1 billion" instead of "10 quintillion."</p>

<table class="table table-bordered">
<tr>
    <th>Place</th>
    <th>10^0</th>
    <th>10^1</th>
    <th>10^2</th>
    <th>10^4</th>
    <th>10^8</th>
    <th>10^16</th>
    <th>10^32</th>
</tr>
<tr>
    <th>Place Name</th>
    <td>Ones</td>
    <td>Tens</td>
    <td>Hundreds</td>
    <td>Thousands</td>
    <td>Millions</td>
    <td>Billions</td>
    <td>Trillions</td>

</tr>
<tr>
    <th>Smallest Example</th>
    <td>1</td>
    <td>10</td>
    <td>100</td>
    <td>1,0000</td>
    <td>1,0000,<wbr>0000</td>
    <td>1,0000,<wbr>0000,<wbr>0000,<wbr>0000</td>
    <td>1,0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000</td>
</tr>
</table>

<p>In my numbering system, I might also shorten two names: "seven" becomes "sep" and "tens" become "-ty"(pronounced like "tea")." 10 - 20 would be read as:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <td>10</td>
    <td>11</td>
    <td>12</td>
    <td>13</td>
    <td>14</td>
    <td>15</td>
    <td>16</td>
    <td>17</td>
    <td>18</td>
    <td>19</td>
    <td>20</td>
</tr>
<tr>
    <th>Name</th>
    <td>Onety</td>
    <td>Onety-one</td>
    <td>Onety-two</td>
    <td>Onety-three</td>
    <td>Onety-four</td>
    <td>Onety-five</td>
    <td>Onety-six</td>
    <td>Onety-sep</td>
    <td>Onety-eight</td>
    <td>Onety-nine</td>
    <td>Twoty</td>
</tr>
</table>

<p>Already there's some logic to the number names. The place names would be recursive like so:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <th>English Name</th>
    <th>New Name</th>
</tr>
<tr>
    <td>5</td>
    <td>Five</td>
    <td>Five</td>
</tr>
<tr>
    <td>55</td>
    <td>Fifty-five</td>
    <td>Fivety-five</td>
</tr>
<tr>
    <td>555</td>
    <td>Five-hundred fifty-five</td>
    <td>Five-hundred fivety-five</td>
</tr>
<tr>
    <td>5555</td>
    <td>Five-thousand fifty-five</td>
    <td>Fivety-five-hundred fivety-five</td>
</tr>
<tr>
    <td>5,5555</td>
    <td>Fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>55,5555</td>
    <td>Five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>555,5555</td>
    <td>Five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>5555,5555</td>
    <td>Fifty-five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Fivety-five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>5,5555,5555</td>
    <td>Five-hundred-fifty-five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-million fivety-five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
</table>

<h3 id="it%27s-already-been-done">It's Already Been Done</h3>

<p>While thinking of this numbering system, I found out that one of my programming heroes, Donald Knuth, had come up with a very similar alternative almost 30 years prior (1981 - same year as Tommy Tutone's number-memorization hit mentioned above -- coincidence?). His system is called "<a href="https://en.wikipedia.org/wiki/-yllion">-yllion</a>" and is also influenced by the Chinese number system, has exponential binary growth, grouping digits in fours, renames some of the numbers, and has recursive naming. Knuth gets rid of "thousand" and replaces it with "myriad;" "million," "billion," etc become "myllion," "byllion," etc. I thought it would be great to use a combination of the two, especially for insanely large numbers.</p>

<p>While driving or working, I would count things in this manner until it became second-nature to me. Then I realized that knowing a secret language that has a global speaker count of 1 is not a good thing. I could either spread my idea by conquering and burning the world ala Genghis Khan or I could quietly give up. I chose the more gentle option.</p>

<h3 id="the-chinese-connection">The Chinese Connection</h3>

<p>Fast forward to a few nights ago. I was studying the Chinese numbering system via edX's <a href="https://www.edx.org/school/mandarinx">MandarinX</a> course and was learning the  separate symbols for 1, 10, 100, &amp; 1000 (<lang = "zh">一, 十, 一百, 一千</lang>, respectively). Then it gets interesting, Chinese has symbols for 10,000 (<lang = "zh">一万</lang>) and doesn't have another new symbol until 100,000,000 (<lang = "zh">一亿</lang>). Why 10,000 and 100,000,000? Then I thought back to my toy numbering system. Notice any similarities?</p>

<table class="table table-bordered">
<tr>
    <th>My Number System</th>
    <th>Chinese</th>
</tr>
<tr>
    <td>1</td>
    <td lang = "zh">一</td>
</tr>
<tr>
    <td>10</td>
    <td lang = "zh">十</td>
</tr>
<tr>
    <td>100</td>
    <td lang = "zh">一百</td>
</tr>
<tr>
    <td>1000</td>
    <td lang = "zh">一千</td>
</tr>
<tr>
    <td>1,0000</td>
    <td lang = "zh">一万</td>
</tr>
<tr>
    <td>1,0000,0000</td>
    <td lang = "zh">一亿</td>
</tr>
</table>

<h3 id="a-modest-proposal">A Modest Proposal</h3>

<p>I do not believe that changing the Western number system is a reasonable expectation. After all, the Metric system (ok, "SI") has been around for several hundred years and the US is still stuck on the Imperial system for most things. We still use miles, pounds per square inch, and degrees Fahrenheit; but there's hope: I recently ran a 5K (5 kilometer) race, my mechanic has to use Metric wrenches on my and others' cars, and we buy bottles of soda and hooch in Liters (750 mL, 1.5 L, or 2 L). So perhaps there might be room for the -yllion system or maybe my modified -yllion system. Given the huge increase in drive sizes over the last 20 years, we are quickly running out of ways to describe their units of capacity. 25ish years ago, I thought that I was pretty hot stuff with my 20 MB (~ 20,971,520 Bytes) RLL hard drive. 1 decade later, I was thinking that my 250 GB (~ 268,435,456,000 Bytes) PATA drive was pretty hot stuff. A decade later, yesterday, I saw a 6 TB (~ 6,597,069,766,656 Bytes) drive array on sale for the same price I bought my first 20 MB hard drive. What's my point? The drives I'm describing are consumer-grade drives. In the IT-world, consumer-grade size is laughable. 15 years ago, I had heard an NPR report stating that the total size of data on the Internet was estimated to be 2 Terabytes. Last year, when I left a small IT shop in a small school district, we were in talks to bring on a drive array whose size was measured in Exabytes. Exabytes. That totally bypasses the whole Petabytes unit of measurement. So, after Exabytes, what then? Zottabytes? Then what? OMGigabytes?</p>

<p>If we were to recalibrate our units of measurement for computer-based things, perhaps we could have an easier time of describing those units of measurement if we were to use a different unit of measurement.</p>

<p>Let 1000 Bytes = 1 KB. I know 1 standard KB == 1024 Bytes, but let's go with the marketing assumption that computer units are base-10. That would mean that 1 Byte is the same as 0.001 KB. Now, let's expand upon these KB units using the -yllion number system:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <th>Place</th>
    <th>Current Name</th>
    <th>New Name: Base = 1 KB</th>
    <th>New Name: Base = 1 GB</th>
</tr>
<tr>
    <td>0.001 KB</td>
    <td>10^-3</td>
    <td>1 Byte</td>
    <td>1 ten-hundredth KB</td>
    <td>100 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>0.01 KB</td>
    <td>10^-2</td>
    <td>10 Bytes</td>
    <td>1 hundredth KB</td>
    <td>10 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>0.1 KB</td>
    <td>10^-1</td>
    <td>100 Bytes</td>
    <td>1 tenth KB</td>
    <td>1 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>1 KB</td>
    <td>10^0</td>
    <td>1 KB</td>
    <td>1 KB</td>
    <td>100 Myllionth GB</td>
</tr>
<tr>
    <td>10 KB</td>
    <td>10^1</td>
    <td>10 Kilobytes</td>
    <td>10 KB</td>
    <td>10 Myllionth GB</td>
</tr>
<tr>
    <td>100 KB</td>
    <td>10^2</td>
    <td>100 Kilobytes</td>
    <td>1 Hundred KB</td>
    <td>1 Myllionth GB</td>
</tr>
<tr>
    <td>1000 KB</td>
    <td>10^3</td>
    <td>1 Megabyte</td>
    <td>10 Hundred KB</td>
    <td>100 Myriadth GB</td>
</tr>
<tr>
    <td>1,0000 KB</td>
    <td>10^4</td>
    <td>10 Megabytes</td>
    <td>1 Myriad KB</td>
    <td>10 Myriadth GB</td>
</tr>
<tr>
    <td>10,0000 KB</td>
    <td>10^5</td>
    <td>100 Megabytes</td>
    <td>10 Myriad KB</td>
    <td>1 Myriadth GB</td>
</tr>
<tr>
    <td>100,0000 KB</td>
    <td>10^6</td>
    <td>1 Terabyte</td>
    <td>1 Hundred Myriad KB</td>
    <td>10 Hundredth GB</td>
</tr>
<tr>
    <td>1000,0000 KB</td>
    <td>10^7</td>
    <td>10 Terabytes</td>
    <td>10 Hundred Myriad KB</td>
    <td>1 Hundredth GB</td>
</tr>
<tr>
    <td>1;0000,0000 KB</td>
    <td>10^8</td>
    <td>100 Terabytes</td>
    <td>1 Myllion KB</td>
    <td>1 Tenth GB</td>
</tr>
<tr>
    <td>10;0000,0000 KB</td>
    <td>10^9</td>
    <td>1 Gigabyte</td>
    <td>10 Myllion KB</td>
    <td>1 GB</td>
</tr>
<tr>
    <td>100;0000,0000 KB</td>
    <td>10^10</td>
    <td>10 Gigabytes</td>
    <td>1 Hundred Myllion KB</td>
    <td>10 GB</td>
</tr>
<tr>
    <td>1000;0000,0000 KB</td>
    <td>10^11</td>
    <td>100 Gigabytes</td>
    <td>10 Hundred Myllion KB</td>
    <td>1 Hundred GB</td>
</tr>
<tr>
    <td>1,0000;0000,0000 KB</td>
    <td>10^12</td>
    <td>1 Terabyte</td>
    <td>1 Myriad Myllion KB</td>
    <td>10 Hundred GB</td>
</tr>
<tr>
    <td>10,0000;0000,0000 KB</td>
    <td>10^13</td>
    <td>10 Terabytes</td>
    <td>10 Myriad Myllion KB</td>
    <td>1 Myriad GB</td>
</tr>
<tr>
    <td>100,0000;0000,0000 KB</td>
    <td>10^14</td>
    <td>100 Terabytes</td>
    <td>100 Myriad Myllion KB</td>
    <td>10 Myriad GB</td>
</tr>
<tr>
    <td>1000,0000;0000,0000 KB</td>
    <td>10^15</td>
    <td>1 Petabyte</td>
    <td>10 Hundred Myriad Myllion KB</td>
    <td>100 Myriad GB</td>
</tr>
<tr>
    <td>1:0000,0000;0000,0000 KB</td>
    <td>10^16</td>
    <td>10 Petabytes</td>
    <td>1 Byllion KB</td>
    <td>1 Myllion GB</td>
</tr>
<tr>
    <td>1'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000 KB</td>
    <td>10^32</td>
    <td>100 Million Yottabytes</td>
    <td>1 Tryllion KB</td>
    <td>100 Myriad Myllion Byllion GB</td>
</tr>
<tr>
    <td>1'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000 KB</td>
    <td>10^64</td>
    <td>10 Duodecillion Yottabytes</td>
    <td>1 Quadryllion KB</td>
    <td>100 Myriad Myllion Byllion Tryllion GB</td>
</tr>
</table>

<p>As you can see, somewhere between 10 Petabytes (1 Byllion KB) and 100 Million Yottabytes (1 Tryllion KB), we run out of SI units to describe the computer capacity. At some point, we'll either have to come up with a bunch of SI units to use with capacity, or we'll have to come up with a different way to count that capacity.</p>

<p>I expect to see capacities measured in Yottabytes within the next 20 years. Then what?</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP&#039;s Array_Filter Oddity]]></title>
            <link href="http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity"/>
            <updated>2015-07-08T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity</id>
            <content type="html"><![CDATA[<p>I was studying the <a href="http://php.net/manual/en/function.array-filter.php"><code>array_filter</code></a> in PHP and was enjoying coming up with a test that could help me learn better <code>array_filter</code> magic. For instance, to filter all words whose first letter is a vowel, I created this PHPUnit test:</p>

<pre><code class="php">public function testFilterVowelWords()
{
    $vowel = function ($word) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($word[0], $vowels);
    };

    $words = ["apple", "baby", "cookie", "danger", "element", "fountain", "grape"];

    $vowelWords = array_filter($words, $vowel);

    $this-&gt;assertEquals(["apple", "element"], array_values($vowelWords));
}
</code></pre>

<p>So, yay <code>array_filter</code>! But wait, what's this? There's an optional flag for <code>array_filter</code> that was introduced in PHP 5.6? It allows one to filter by array key, or if one is completely nuts, by both array value and array key. Woah.
<img src="https://s3.amazonaws.com/giphymedia/media/yUIktdHUIamcg/giphy.gif"></p>

<p>So, if one were to filter by key, easy-peasy. The flag is <code>ARRAY_FILTER_USE_KEY</code>:</p>

<pre><code class="php">public function testFilterVowelWordsByKey()
{
    $vowel = function ($key) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($key, $vowels);
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $vowel, ARRAY_FILTER_USE_KEY);

    $this-&gt;assertEquals(["a"=&gt;"apple", "e"=&gt;"element"], $vowelWords);
}
</code></pre>

<p>So, if one wanted to filter by key AND value, the flag would be <code>ARRAY_FILTER_USE_BOTH</code>, right?</p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($key, $value) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($key, $vowels)) {
            return true;
        } else {
            return (in_array($value[1], $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yet, epic fail!</p>

<p>The <code>ARRAY_FILTER_USE_BOTH</code> flag requires the order: <code>value</code> then <code>key</code> NOT <code>key</code> then <code>value</code></p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($value, $key) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($value[1], $vowels)) {
            return true;
        } else {
            return (in_array($key, $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yay! This test passes! But, what the heck? Why <code>value</code> then <code>key</code>? Every time we read about <code>key =&gt; value</code> pairs, it's in the order of <code>key</code> then <code>value</code>. Yet, this is <code>value</code> then <code>key</code>. What gives?</p>

<p>I looked into this. I couldn't find any <a href="https://wiki.php.net/rfc">RFCs</a> recommending this order. I even checked PHP internals discussions and saw the question raised of <a href="http://marc.info/?l=php-internals&amp;m=137159339704961&amp;w=2">which should come first, key or value</a>, but the question doesn't get answered. Eventually, we get a statement of (paraphrased)<a href="http://marc.info/?l=php-internals&amp;m=138023845322301&amp;w=2">"Hey, having flags for using key or using both key &amp; value is great, I'll add it."</a>. The <a href="https://github.com/php/php-src/pull/287">pull request</a>, though it contains discussion on adding this flag, doesn't contain any discussion on parameter order. The <a href="https://github.com/php/php-src/blob/master/ext/standard/array.c#L4803">source code</a> does not contain enough documentation to give an inkling as to why this is.</p>

<p>I struggled to figure out a good reason for <code>value</code> to come before <code>key</code> when using the <code>ARRAY_FILTER_USE_BOTH</code> flag. In desperation, I reached out to the PHP Internals dev who implemented this feature, Tjerk Meesters (aka '<a href="https://twitter.com/datibbaW">datibbaw</a>'). As an exemplar of where the amazing PHP community shines, Tjerk responded within minutes with helpful background information on this feature. First, this feature was designed to not break existing implementations of <code>array_filter</code>. Adding <code>key</code> as the second parameter seemed to be the most polite way to do this. Secondly, this is the same order as used in JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a>. Boom.</p>

<p>The way I justify the order is by looking at the original intent of <code>array_filter</code> -- it was designed to filter an array based on the values contained within that array. So, value is first and foremost the primary thing this function checks against; the key is merely secondary. Therefore, when using the <code>ARRAY_FILTER_USE_BOTH</code> flag, the order of parameters for the callback will be <code>value</code> and then <code>key</code>.</p>

<p>If I were to treat this function as a consumer that turns food into another product, the main food this function eats is the value platter. For dessert, it might choose to eat a key lime pie. Or it might decide to order the full course and ask for both the value platter with dessert.</p>

<p>What had seemed like an oddity at first now makes sense in the right frame of mind. If you use <code>array_filter</code>, remember that it is all about the array <code>value</code>. If you want to include the <code>key</code> in the filter, know that <code>key</code> is always secondary to the original intent.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Low Carb High Fat Diet]]></title>
            <link href="http://ericpoe.com/blog/2015/05/12/lchf-diet"/>
            <updated>2015-05-12T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/05/12/lchf-diet</id>
            <content type="html"><![CDATA[<p>The LCHF diet can be summarized as follows:</p>

<p>"The fat you eat flows through; the fat you make sticks to you."</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Leveled Up: PHP Certified]]></title>
            <link href="http://ericpoe.com/blog/2015/05/08/php-certified"/>
            <updated>2015-05-08T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/05/08/php-certified</id>
            <content type="html"><![CDATA[<p>On Wednesday, I took an extended lunch break in order to take the Zend PHP Certification test at a local Pearson VUE Testing Center.</p>

<p>After a few years of using PHP and studying for a few months, I am a <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certified PHP Engineer</a>!</p>

<p>Books that have helped me:</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920012443.do">Programming PHP, 3rd Ed</a> by Kevin Tatroe, Peter MacIntyre, &amp; Rasmus Lerdorf</li>
<li><a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey</li>
<li>Reviewing the  <a href="https://www.zend.com/en/services/certification/php-certification-study-guide">Zend PHP Certification Study Guide</a> and doing the problems contained within.</li>
</ul>

<p>People who have helped me along the way:</p>

<ul>
<li>My wife.</li>
<li>My kids.</li>
<li>My mentor and fellow KCPUG co-organizer, <a href="http://johnkary.net">John Kary</a></li>
<li>KCPUG leader <a href="https://twitter.com/dan_holmes/">Dan Holmes</a> and the great members of the <a href="http://www.meetup.com/kcphpug/">KCPUG</a>.</li>
<li><a href="http://blog.calevans.com/">Cal Evans</a> and the great speakers at <a href="http://nomadphp.com/">NomadPHP</a>.</li>
<li><a href="http://www.geekyboy.com/">Adam Culp</a> for giving me the push at Lone Star PHP 2014.</li>
</ul>

<p>Practices that have help me:</p>

<ul>
<li>ABC: Alway be coding!</li>
<li>Added an hour appointment to my calendar every day, after the kids were in bed, to study.</li>
<li>Watched NomadPHP talks (live, recorded, or <a href="https://www.youtube.com/channel/UCYHDBrzJ5o5d97KlCAUhICA">on Youtube</a>)</li>
<li>Listen to various podcasts about programming, not all about PHP</li>
<li>Practiced</li>
<li>Kata</li>
<li>Present at KCPUG (forced me to really think about the how and why)</li>
<li>Followed my curiosity in code</li>
</ul>

<p>These practices and personal connections will continue long after my certification studies ended. I'm looking forward to the next leg of the journey.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Revenge of the Fifth]]></title>
            <link href="http://ericpoe.com/blog/2015/05/05/Revenge-Of-The-Fifth"/>
            <updated>2015-05-05T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/05/05/Revenge-Of-The-Fifth</id>
            <content type="html"><![CDATA[<p>Today is the unofficial Star-Wars-fan holiday known as the Revenge of the Fifth.</p>

<p><a href="https://twitter.com/eric_poe/status/463399125749223424">Last year</a>, I noticed that 5/5 (numerical representation of 5 May, or is that May 5?) can be written in binary as <code>101 101</code>. Or more artistically as:</p>

<p><span title="the numbers 101 and 101 next to each other look like a pair of TIE fighters flying in formation"><strong>|o| |o|</strong></span></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lone Star PHP 2015]]></title>
            <link href="http://ericpoe.com/blog/2015/04/28/LoneStarPHP2015"/>
            <updated>2015-04-28T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/04/28/LoneStarPHP2015</id>
            <content type="html"><![CDATA[<p>I attended Lone Star PHP <a href="/blog/2014/05/06/Lonestar-PHP-Conference-2014">last year</a> with much hope and even more trepidation as to my abilities to hold my own with other members of the PHP community. I was the recipient of the Lone Star PHP scholarship, so my attendance and stay were taken care of by the conference sponsors (thank you! thank you! thank you!). I spent a day at an intro-to-PHP workshop, where I realized that I knew more about modern PHP and its practices than I cared to admit. I spent another day attending great talks. I met many wonderful folks, some of whom I have maintained contact and some PHP luminaries I follow on Twitter, blog posts, and podcasts. Since I had accepted a job offer while doing the TSA dance at DFW airport, I spent my evenings leaving the after-parties early to work on my resignation letter.</p>

<p>This year was my sophomore attendance, so I attended with a less timid attitude, a lifetime more of experience, an established and beloved career, and looking forward to the talks I would attend, the friends I would see again, and the new friends I would make. This time, my employer, <a href="http://stowers.org">Stowers Institute for Medical Research</a> sent me (thank you!). This time around, I found that I was able to offer more to the conference than I had before. I connected at least one attendee to his <a href="http://devict.org/">local user group</a>, talked up <a href="http://nomadphp.com/">NomadPHP</a> and <a href="https://coderdojo.com/">CoderDojo</a>, and was able to explain some of the awesomeness of <a href="https://getcomposer.org/">Composer</a>. I also attended great talks and workshops and met some amazing folks.</p>

<p>Lone Star is a regional conference, has world-class talks, and feels like a community. Many of the speakers know each other and hang out together for the several days of the conference (and sometimes even a day or so later). Yet, even though many of the speakers are friends with each other, they are open and welcoming to outsiders like me.</p>

<p>The business value for attending the conference is in the talks themselves. I was able to take concepts from at least two talks and apply them to code I was working on for work the following week. The long-term value will be seen by my employer later as I apply lessons learned from the various intellectual paths opened to me by all of the talks.</p>

<p>The reason I will attend Lone Star again is for what happens outside of the talks. The "hallway track" is a part of this. I attended two talks I didn't expect to attend due to having good conversations with attendees after a talk that <del>were interrupted</del> were followed by a great talk in the same room.</p>

<p>The lunches provided by the conference sponsors were great. Day 0's lunch was off, schedule-wise, in that the line went pretty far back; yet, I had several great conversations with great people while waiting in line, talked with Adam Culp about his long-distance running and learned of his new <a href="https://rungeekradio.com/">podcast</a>, and had Ben Ramsey sign my copy of the 3rd edition of the <a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend Certification Guide</a> (Davey Shafik signed it Saturday night). Friday's lunch was fajitas and Saturday's was Texas BBQ. Yum. Funny aside: on one of the lunches, forks were more popular than were available; so I grabbed two plastic knives and used them like chopsticks to eat my lunch -- I felt like I was epitomizing the <a href="http://blog.codinghorror.com/the-php-singularity/">double-clawed hammer</a> of PHP. Thank you, <a href="http://www.phpdevhired.com/">PHPDevHired</a> and <a href="http://www.robofirm.com/">Robofirm</a> for sponsoring the lunches!</p>

<p>The hallway track at Lone Star was pretty awesome. I met an Austin-based dev team from Whole Foods, user group leaders from around the United States, many Texas-based developers, speakers and other luminaries of the PHP community, and people I had met last year. At one point, I saw various speakers in the hallway and asked if they were "the hallway track or the rogue's gallery;" one responded that they were in detention.</p>

<p>The after-parties were low key and were largely an extension of the hallway track. <a href="http://omni-spot.blogspot.com/">Omni Adams</a> provided his awesome homebrew beers -- incredibly, they have improved from last year's perfection. I missed the <a href="http://looselycoupled.info/">Loosely Coupled</a> podcast Friday night due to being caught up with great conversations with members of the community. Saturday night, I was able to take part in the fun "<a href="https://github.com/jeremeamia/JeoPHPardy">PHP Jeopardy</a>" game, where I forgot everything I knew. I was honored to take part in the "It's the booze talking" edition of the <a href="https://voicesoftheelephpant.com/">Voices of the Elephant</a> podcast. Thank you, <a href="https://www.sparefoot.com/">SpareFoot</a> and <a href="http://www.softlayer.com/">SoftLayer</a> for sponsoring the after-parties!</p>

<p>Following the after-parties, groups of us got together to have dinner, hit a karaoke bar, and in the midst of Dallas thundersqualls, have drinks at the hotel the speakers were staying at and engage in great conversations. (Thank you, OKC <a href="https://twitter.com/jakeasmith">Jake Smith</a> &amp; crew for providing transportation!)</p>

<h3 id="talks-attended">Talks Attended</h3>

<p>These are the talks I attended. My (and others') reviews are included in the links. These first two talks (ok, workshops) are reviewed at <a href="/blog/2015/04/27/LoneStarPHP-Day-0">Lone Star PHP 2015: Day 0 - Training Day</a></p>

<ul>
<li><a href="https://joind.in/talk/view/13536">Getting Started with PHP Unit</a> - Matt Frost</li>
<li><a href="https://joind.in/talk/view/13539">Wax On, Wax Off: Coder Dojo</a> - Rabbi Yitzchok Willroth</li>
<li><a href="https://joind.in/talk/view/13543">Architecting with Queues for Scale, Speed, and Separation</a> - Sandy Smith</li>
<li><a href="https://joind.in/talk/view/13544">Caching Strategies</a> - Ben Ramsey</li>
<li><a href="https://joind.in/talk/view/13546">Dependency Injection, Dependency Inversion, and You</a> - Jeff Carouth</li>
<li><a href="https://joind.in/talk/view/13549">Talmudic Maxims to Maximize Your Growth as a Developer</a> - Rabbi Yitzchok Willroth</li>
<li><a href="https://joind.in/talk/view/13553">Object-Oriented JavaScript (yes, it really exists)</a> - Jordan Kasper</li>
<li><a href="https://joind.in/talk/view/13555">It Feels Great to Iterate</a> - Jeremy Lindblom</li>
<li><strong>Keynote:</strong> <a href="https://joind.in/talk/view/13558">Teaching Kids to Fail</a> - Maurya Couvares</li>
<li><a href="https://joind.in/talk/view/13560">Refactoring Legacy Code</a> - Adam Culp</li>
<li><a href="https://joind.in/talk/view/13563">Debuggin Zen</a> - Ben Ramsey</li>
<li><a href="https://joind.in/talk/view/13566">Functional PHP</a> - Larry Garfield</li>
<li><a href="https://joind.in/talk/view/13562">Building Extraordinary Packages</a> - Phil Sturgeon</li>
<li><a href="https://joind.in/talk/view/14411">Building Rock Solid Software in the Real World</a> - Omni Adams</li>
<li><a href="https://joind.in/talk/view/13575">Don't Fear the Regex</a> - Sandy Smith</li>
<li><strong>Keynote:</strong> <a href="https://joind.in/talk/view/13576">Turning Your Code Into a Company: The Parts They Don't Tell You</a> - Luke Stokes</li>
</ul>

<p>I had submitted a couple of talks that weren't accepted; yet I did not attend any talks that made me think "they turned my talk down for this?" Even the duds were golden!</p>

<h3 id="conclusion">Conclusion</h3>

<p>This was a great conference. The Dallas PHP community and the Lone Star organizers are to be commended on providing such a great conference. The cost of admission is perfect for those entering PHP development (or attending locally) and the caliber of talks are perfect for those who are presently engaged in PHP development (or attending from afar). The after-parties are great for adults away from their families, yet fun for locals to bring their families.</p>

<p>I met many wonderful people and learned much that will benefit both my employer and myself.</p>

<p>I will be back. Next time, I hope, with a talk in my pocket.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Lone Star PHP 2015: Day 0]]></title>
            <link href="http://ericpoe.com/blog/2015/04/27/LoneStarPHP-Day-0"/>
            <updated>2015-04-27T00:00:00-05:00</updated>
            <id>http://ericpoe.com/blog/2015/04/27/LoneStarPHP-Day-0</id>
            <content type="html"><![CDATA[<p>The first day of Lone Star 2015 was devoted to training. The workshop track I took was geared towards unit testing.</p>

<h3 id="getting-started-with-phpunit">Getting Started with PHPUnit</h3>

<ul>
<li><a href="http://shortwhitebaldguy.com/">Matt Frost</a></li>
<li>Twitter: <a href="https://twitter.com/shrtwhitebldguy">@shrtwhitebldguy</a></li>
<li><a href="http://www.slideshare.net/mfrost503/getting-startedphp-unit">Slides</a></li>
</ul>

<p>One reason I took this workshop was so that I could become more familiar with mocks. I had a mental block when it comes to mocks and had a hard time seeing their value. After taking this workshop and talking about mocks with Matt, I can see and appreciate their value. Mock the things we don't directly test (ex. database connections, sql queries, filesystem i/o, etc) to speed up the individual unit tests. Mock the things we don't directly control (ex. 3rd-party API, access to another server on our network, etc) since we don't want to fail a test due to a temporary connection error.</p>

<p>What I loved about this workshop was the easy-going manner in which Matt got us to embrace unit testing and mocking. Matt even provided a <a href="https://github.com/mfrost503/phpunit-tutorial">git repo</a> for us to clone in order to get started on the fun part of the workshop. Mocking was definitely covered in the interactive part of the workshop.</p>

<p>Unfortunately, our getting started on the interactive portion of the workshop was delayed due to poor wifi signal. By the time most of us were able to get the git repo cloned and run <code>composer install</code>, we only had time to do one of the two mocking exercises. Yet, since I still have the repo cloned on my machine, there's no reason I shouldn't be able to finish the workshop at my leisure.</p>

<h3 id="wax-on%2C-wax-off%3A-coder-dojo">Wax On, Wax Off: Coder Dojo</h3>

<ul>
<li><a href="https://coderabbi.github.io/">Yitzchok Willroth</a></li>
<li>Twitter: <a href="https://twitter.com/coderabbi">@coderabbi</a></li>
<li>Slides unavailable</li>
</ul>

<p>I have <a href="/blog/2014/12/22/a-tdd-fizz-buzz-kata">done kata</a> before and am a proponent of using them to strengthen knowledge and skills, so this was a workshop I had mentally signed up for as soon as I heard it was being offered.</p>

<p>Rabbi Yitzchok Willroth (aka "CodeRabbi") leads his audience with gentle enthusiasm through an intellectual exercise replete with philosophy and references to psychological studies. During this workshop, Coderabbi had a few friends (luminaries of the PHP community, really) float around to offer guidance to the perplexed during each kata exercise. Their assistance was much appreciated.</p>

<p>The kata we worked on was <a href="http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a>. We did not have the remainder of the workshop to work on this kata. Instead, we had 30 minutes (you read that right) to work on it. Since this is not something one can learn the rules to and code in a sitting, this seemed unfair -- like being told that the <a href="http://www.coolrunning.com/engine/2/2_3/181.shtml">Couch-to-5K</a> program we were going to follow is to get off the couch and then run 5 kilometers in 30 minutes. As you can imagine, the beginning runner will not complete 5K in 30 minutes, but eventually will with repeated practice. So, too, can one eventually completely code the Game of Life in 30 minutes with repeated practice. What seemed unfair initially, was really a challenge to us to improve, continuously.</p>

<p>One aspect of this workshop that I enjoyed was that at the end of every 30 minute sprint, we were to discard our previous work and start fresh, but with a new constraint to keep our minds sharp. So the second sprint's constraint was to pair up with someone else and see what we could do together. After 30 minutes, the constraint was to make the Cell or Organism (whatever we called it) class not maintain state.</p>

<p>There were times in these kata exercises in which I felt frustrated or angry. Good! For an intellectual exercise, this is the equivalent to feeling muscle strain and soreness in a weight-resistance exercise.</p>

<p>My first pair-up was with a guy who wanted to do the kata in object-oriented javascript and use HTM5 Canvas. At a PHP conference. Yet, once I embraced that he had a better plan of attack than I did, I enjoyed the learning process of watching someone code in a manner that I do not. In that instance, I was not a good pair-partner since I had nothing to contribute regarding Canvas nor from-scratch OOJS. Yet it was a good exercise.</p>

<p>I enjoyed the intellectual exercise of making the Cell Class stateless in that it gave my pair-partner and me the opportunity to discuss what that meant and how to deal with that constraint. We didn't end up with more than an incomplete sketch (in the form of code), but it got our brain juices flowing.</p>

<p>I plan to play with this kata some more on my own and will add additional rules to perhaps mimic competing organisms in the same space. Or, what if one of these organisms has a completely foreign set of rules (like, perhaps cancer cells)?</p>

<p>We started with a Composer-based <a href="https://github.com/coderabbi/coder-dojo">PHPUnit skeleton</a> and a <a href="http://www.codingdojo.org/cgi-bin/index.pl?action=browse&amp;diff=1&amp;id=KataGameOfLife">complicated kata</a>. We ended up with a newfound respect for the squishy gray stuff between our ears.</p>

<h3 id="conclusion">Conclusion</h3>

<p>This was the first year that Lone Star PHP had a day devoted to training. The problems we all shared with wifi were frustrating, but overcome personally by my attendee-coworker with a call to our IT department to turn on the ability to hotspot our phones (thanks, Darren!). A glance at all the <a href="https://twitter.com/sdawncasey/status/589097774852935680">Wifi access points</a> at the conference center showed that we were not the only ones to do this. But really, for the workshops, wifi wasn't important except for at the beginning of each workshop so we could clone git repos and run <code>composer install</code>.</p>

<p>The night before the workshop, I had built a vagrant box exclusively for use at the conference. <a href="https://twitter.com/juantreminio">Juan Treminio</a>'s (a speaker at Lone Star PHP 2014!) <a href="https://puphpet.com/">Puphpet</a> tool proved to be invaluable for this purpose. Had I been aware of the need to clone git repos and get the required components installed via composer, I would have done so ahead of time.</p>

<p>In short, the workshops were great, yet too much time was wasted by all in doing something that takes maybe a minute on the office or hotel wifi but takes for-frikkin-ever on a shared conference wifi. I would like to see more notice next time for required environments so we can hit the ground running. The topics were great, and I would have loved to have been able to attend them all!</p>
]]></content>
        </entry>
    </feed>