<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Eric Poe]]></title>
    <link href="http://ericpoe.com/atom.xml" rel="self"/>
    <link href="http://ericpoe.com/"/>
    <updated>2016-02-06T18:36:37+00:00</updated>
    <id>http://ericpoe.com/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Last Month in PHP: 2016 January]]></title>
            <link href="http://ericpoe.com/blog/2016/02/06/last-month-in-php"/>
            <updated>2016-02-06T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2016/02/06/last-month-in-php</id>
            <content type="html"><![CDATA[<p>From a <a href="http://kcpug.org/">KCPUG</a> lightning talk given on <a href="http://www.slideshare.net/poeeric/last-month-in-php-january-2016">03 Feb 2016</a></p>

<p>January was a relatively light month in PHP. Yet, we saw an exciting new microframework get its first non-beta release.</p>

<h3 id="php-updates">PHP Updates</h3>

<p>Security and bugfix updates to PHP were released in January. Upgrade if you have
a version less than:</p>

<ul>
<li>7.0.2</li>
<li>5.6.17</li>
<li>5.5.31</li>
</ul>

<h3 id="cmses">CMSes</h3>

<p>Drupal and WordPress both released point-releases.</p>

<ul>
<li>Drupal 8.0.2

<ul>
<li>bug fixes</li>
</ul></li>
<li>WordPress 4.4.1 (<strong>Upgrade!</strong>)

<ul>
<li>1 Security fix for XSS vulnerability</li>
<li>52 bug fixes</li>
</ul></li>
</ul>

<h3 id="%EE%BCframeworks">Î¼Frameworks</h3>

<h4 id="zend-expressive-1.0">Zend Expressive 1.0</h4>

<p>Zend Expressive is a <a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> Middleware. It looks pretty interesting and bears further investigation.</p>

<p><strong>Example:</strong> <a href="http://www.sitepoint.com/build-nasa-photo-gallery-zend-expressive/">sitepoint: How to Build a NASA Photo Gallery with Zend Expressive</a></p>

<p><strong>See:</strong> <a href="https://zendframework.github.io/zend-expressive/">Zend Expressive</a></p>

<h4 id="lumen-5.2.4">Lumen 5.2.4</h4>

<p>5.2 introduces:</p>

<ul>
<li>stateless APIs</li>
<li>No Sessions

<ul>
<li>This changes authentication</li>
</ul></li>
</ul>

<p><strong>See:</strong> Lumen 5.2 <a href="https://lumen.laravel.com/docs/5.2/releases">release notes</a></p>

<h4 id="silex-1.3.5">Silex 1.3.5</h4>

<ul>
<li>Fixed typo</li>
</ul>

<p><strong>See:</strong> Silex 1.3.5 <a href="https://github.com/silexphp/Silex/blob/1.3/doc/changelog.rst">changelog</a></p>

<h4 id="slim-3.1.0">Slim 3.1.0</h4>

<ul>
<li>Adds <code>getParsedBodyParam()</code> and <code>getQueryParam()</code> to Slim&#92;Http&#92;Request</li>
<li>Adds <code>App::process()</code> to allow Slim to run when a Request object and Response object already exist</li>
<li><a href="https://en.wikipedia.org/wiki/HTTP_451">HTTP status code 451</a></li>
</ul>

<p><strong>See:</strong> Slim 3.1.0 <a href="http://www.slimframework.com/2016/01/08/slim-3.1.0.html">release notes</a></p>

<h3 id="frameworks">Frameworks</h3>

<p>Various frameworks had point releases. I'm not sure what changed, so I assume that these are bugfixes.</p>

<ul>
<li>Laravel 5.2.12</li>
<li>Symfony [2.8.2, 2.7.9, 2.6.13, 2.3.37]</li>
<li>Zend Framework 2.5.3</li>
</ul>

<h3 id="upcoming-conferences">Upcoming Conferences</h3>

<p><a href="http://2016.sunshinephp.com/">Sunshine PHP</a>
Feb 4-6: Miami, FL</p>

<p><a href="http://2016.midwestphp.org/">Midwest PHP</a>
Mar 4-5: Minneapolis, MN</p>

<p><a href="http://lonestarphp.com">Lone Star PHP</a>
Apr 7-9: Dallas, TX</p>

<p><a href="https://tek.phparch.com">php[tek]</a>
May 23-27: St Louis, MO</p>

<p><a href="http://kcdc.info">Kansas City Developer Conference</a>
June 22-24 - Kansas City, MO
Call for papers deadline: Feb 12</p>

<h3 id="nomadphp">NomadPHP</h3>

<p><a href="http://nomadphp.com">NomadPHP</a> is an online supplement to your in-real-life user group.</p>

<p>Feb 18: 01:00 PM CST</p>

<ul>
<li><a href="https://nomadphp.com/2015/11/20/2016-02-eu/">The Life of an If Statement</a></li>
<li>Anthony Ferrara - <a href="https://twitter.com/ircmaxell">@ircmaxell</a></li>
</ul>

<p>Feb 18: 08:00 PM CST</p>

<ul>
<li><a href="https://nomadphp.com/2015/11/20/2016-02-us/">From Idea to Prototype in 50 Minutes with Laravel
</a></li>
<li>Matt Stauffer - <a href="https://twitter.com/stauffermatt">@stauffermatt</a></li>
</ul>

<h3 id="next-month%27s-kcpug">Next Month's KCPUG</h3>

<p>We will have a busy session next month!</p>

<ul>
<li><p><a href="https://twitter.com/johnkary">John Kary</a> will present "Rethinking Loops" &mdash; dealing with functional programming in PHP. This is the same talk that he will give at:</p>

<ul>
<li><a href="http://lonestarphp.com/sessions/#rethinking-loops">Lone Star PHP</a></li>
<li><a href="http://2016.midwestphp.org/session/rethinking-loops/">Midwest PHP</a></li>
</ul></li>
<li><p>Joseph Maxwell will present a preview of his OAuth2 talks that he will give at:</p>

<ul>
<li><a href="http://lonestarphp.com/sessions/#demystifying-oauth2-an-understandable-way-to-approach-connecting-to-other-systems">Lone Star PHP</a></li>
<li><a href="https://tek.phparch.com/speakers/#70639">php[tek]</a></li>
</ul></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Playing with Docker and Linked Containers]]></title>
            <link href="http://ericpoe.com/blog/2016/01/26/playing-with-docker"/>
            <updated>2016-01-26T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2016/01/26/playing-with-docker</id>
            <content type="html"><![CDATA[<p>In my current job, I am starting the process to upgrade our PHP 5.4 application to a PHP 5.6 application (PHP 7 is not yet support by the majority of the 3rd party libraries we use). I have been tasked with building the staging server for use in testing our legacy application as well as our newer Symfony-based application. We are using an older version of MySQL as well.</p>

<p>At some point, we will want to experiment with PHP 7.x and later versions of MySQL or MariaDB. Yet, will we want to build a brand new server each time?</p>

<p>This seems like a perfect opportunity to play with <a href="http://docker.io">Docker</a>.</p>

<p>I had first looked at Docker a little over a year ago. I had tried to build a dev environment entirely from Docker, but it and I were not yet ready for each other. I could not see Docker as anything other than another way to launch a Vagrant box for development.</p>

<p>This weekend, I looked at Docker again. Now Docker includes a feature called "<a href="https://docs.docker.com/compose/">Docker Compose</a>." This allows one to build a Docker manifest within a YAML file rather than as a complex command-line string.</p>

<p>I played. I looked at building a new Drupal 8 box with a separate MySQL server. As a docker-compose YAML file, this is pretty straight-forward:</p>

<p><code>docker-compose.yml</code></p>

<pre><code class="yaml">drupal8:
  image: drupal
  links:
    - drupal_database:mysql
  ports:
    - 8085:80
drupal_database:
  container_name: drupal_database
  image: mariadb:5.5
  environment:
    MYSQL_ROOT_PASSWORD: examplepass
    MYSQL_USER: user
    MYSQL_PASSWORD: password
    MYSQL_DATABASE: drupal_db
</code></pre>

<p>The above creates two Docker machines: "drupal8" and "drupal_database." The "drupal8" Docker machine is linked to the "drupal_database" which is running MariaDB 5.5. To launch this, I just run <code>docker-compose up</code> from the directory that contains this <code>docker-compose.yml</code> file. This is the equivalent to running:</p>

<pre><code>docker run --name drupal_database \
  -e MYSQL_ROOT_PASSWORD=examplepass \
  -e MYSQL_USER=user \
  -e MYSQL_PASSWORD=password \
  -e MYSQL_DATABASE=drupal_db \
  -d mariadb:5.5

docker run --name drupal8 \
  -p 8085:80 \
  --link drupal_database:mysql \
  -d drupal
</code></pre>

<p>I was able to come up with a working <code>docker-compose.yml</code> file within 30 minutes. It took me much longer to come up with the right <code>docker run</code> statements to make two Docker containers and have the Drupal container link to the MySQL container. Natch, had I read further down the <a href="https://hub.docker.com/_/drupal/">Docker Hub Drupal page</a>, I would have been given a huge clue as to how to connect the two; I just needed to add the appropriate port. Nonetheless, the YAML is much easier me to configure and update than the two <code>docker run</code> commands are.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Last Month in PHP: 2015 December]]></title>
            <link href="http://ericpoe.com/blog/2016/01/06/last-month-in-php"/>
            <updated>2016-01-06T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2016/01/06/last-month-in-php</id>
            <content type="html"><![CDATA[<p>From a <a href="http://kcpug.org/">KCPUG</a> lightning talk given on <a href="http://www.slideshare.net/poeeric/last-month-in-php-december-2015">06 Jan 2016</a></p>

<p>December was a busy month in PHP. A major update to PHP was released,
PHP-FIG approved a new PSR, major CMSes had major releases and/or were patched,
and frameworks had major, minor, and patch releases.</p>

<h3 id="php-7.0.1">PHP 7.0.1</h3>

<p>PHP 7.0 was released on 3 December and was patched to 7.0.1 two weeks later.
PHP 7 includes many new improvements, including:</p>

<ul>
<li>speed!</li>
<li>Scalar type hinting</li>
<li>Return type declarations (optional)</li>
<li>New operators:

<ul>
<li>Null coalescing: <code>??</code></li>
<li>Spaceship: <code>&lt;=&gt;</code></li>
</ul></li>
<li>Constant arrays</li>
<li>Anonymous classes</li>
</ul>

<p>See <a href="http://php.net/manual/en/migration70.new-features.php">PHP 7 New Features</a> for more information.</p>

<h3 id="psr-6-caching-interface">PSR-6 Caching Interface</h3>

<p>PSR-6 ensures a common interface for caching support in PHP, for those libraries and frameworks that utilize it.</p>

<ul>
<li>Allows free-standing libraries to support caching of intermediary data without effort.</li>
<li>Provides a common interface for basic and intermediate-level caching needs.</li>
</ul>

<p>On 8 December, this passed <a href="https://www.reddit.com/r/PHP/comments/3vzvxo/psr6_the_vote_for_psr6_has_passed_in_favor_of/">amidst controversy</a>.</p>

<p>See <a href="http://www.php-fig.org/psr/psr-6/">PSR-6</a> for more information.</p>

<h3 id="wordpress-4.4%3A-%22clifford%22">WordPress 4.4: "Clifford"</h3>

<p>On 8 December, the new version of WordPress, <abbr title "also known as">aka</abbr> "Clifford", was released.</p>

<p>Some of its new features:</p>

<ul>
<li>Theme: <a href="https://wordpress.org/themes/twentysixteen/">Twenty-Sixteen</a></li>
<li>Responsive images</li>
<li>Ability to <a href="https://codex.wordpress.org/Embeds">embed posts</a> from:

<ul>
<li>Other WordPress sites</li>
<li>Other oEmbed providers (reddit, speaker deck, etc)</li>
</ul></li>
<li><a href="https://wordpress.org/plugins/rest-api/">WordPress REST API</a> in Core</li>
<li>Other stuff under-the-hood</li>
</ul>

<p>WordPress 4.4 requires PHP 5.2.4+, although <a href="https://wordpress.org/about/requirements/">PHP 5.6+</a> is recommended.</p>

<p>See: <a href="https://wordpress.org/news/2015/12/clifford/">WordPress 4.4 announcement</a> for more information.</p>

<h3 id="drupal-8.0.1">Drupal 8.0.1</h3>

<p>Drupal 8 was released on 19 November and the first patch was released on 2 December.</p>

<p>New features of Drupal 8 include:</p>

<ul>
<li>HTML 5</li>
<li>Out-of-the-box WYSIWYG editing</li>
<li>Built with modern PHP practices &amp; Libraries:

<ul>
<li>Composer, Symfony2, Guzzle, Twig, etc.</li>
</ul></li>
<li>REST web services</li>
</ul>

<p>Drupal 8 requires PHP 5.5.9+.</p>

<p>See <a href="https://www.drupal.org/8">Drupal 8</a> for more information.</p>

<h3 id="slim-3.0-microframework">Slim 3.0 Microframework</h3>

<p>Slim 3.0 was released on 7 December.</p>

<p>New features of Slim 3.0 include:</p>

<ul>
<li><a href="http://www.slimframework.com/docs/concepts/di.html">Dependency Injection Container</a></li>
<li><a href="http://www.slimframework.com/docs/concepts/middleware.html">PSR-7 Middleware</a> support</li>
<li><a href="http://www.slimframework.com/docs/objects/router.html#route-callbacks">Route callback binding</a></li>
<li>Simpler codebase</li>
</ul>

<p>Slim 3.0 requires PHP 5.5+</p>

<h3 id="symfony-framework">Symfony framework</h3>

<p>Symfony 3.0 was released on 30 November and was patched to 3.0.1 on 26 December.</p>

<p>New features of Symfony 3 include:</p>

<ul>
<li>Locale has been supplanted by Intl</li>
<li>Simplified security</li>
<li>Simplified voters</li>
<li>Monolog Bridge is now <a href="http://www.php-fig.org/psr/psr-3/">PSR-3</a> compatible</li>
<li>Changes in the ways Property Access, Routing, Logging, Translator, Twig, Validator, Yaml, Process, &amp; Swiftmailer, Config, &amp; more are used</li>
</ul>

<p>Symfony 3 requires PHP 5.5.9+</p>

<p>Patches:</p>

<ul>
<li>Symfony 3.0.1</li>
<li>Symfony 2.8.1</li>
<li>Symfony 2.7.8</li>
<li>Symfony 2.3.36</li>
</ul>

<h3 id="laravel-5.2-framework">Laravel 5.2 framework</h3>

<p>Laravel 5.2 was released on 21 December.</p>

<p><a href="https://laravel-news.com/2015/12/laravel-5-2-is-released/">New features of Laravel 5.2</a> include:</p>

<ul>
<li>Auth Scaffolding</li>
<li>Implicit model bindingAppending output from scheduled tasks</li>
<li>Form array validation</li>
<li>Collections wildcards</li>
<li>Database Session Driver</li>
<li>Middleware Groups</li>
<li>Rate Limiting</li>
<li>Eloquent Global Scope</li>
</ul>

<h3 id="virtual-machine%3A-laravel-homestead-5.2">Virtual Machine: Laravel Homestead 5.2</h3>

<p>Now with:</p>

<ul>
<li>PHP7</li>
<li>Composer</li>
<li>git</li>
</ul>

<p>Requires PHP 5.5.9+</p>

<p>See: <a href="https://laravel.com/docs/5.2/homestead">Homestead 5.2</a></p>

<h3 id="upcoming-conferences">Upcoming Conferences</h3>

<p><a href="http://2016.sunshinephp.com/">Sunshine PHP</a>
Feb 4-6: Miami, FL</p>

<p><a href="http://2016.midwestphp.org/">Midwest PHP</a>
Mar 4-5: Minneapolis, MN</p>

<p><a href="http://lonestarphp.com">Lone Star PHP</a>
Apr 7-9: Dallas, TX</p>

<p><a href="https://tek.phparch.com">php[tek]</a>
May 23-27: St Louis, MO</p>

<h3 id="nomadphp">NomadPHP</h3>

<p><a href="http://nomadphp.com">NomadPHP</a> is an online supplement to your in-real-life user group.</p>

<p>Jan 21: 01:00 PM CST
<a href="https://nomadphp.com/2015/10/16/puli-phps-next-package-revolution/">Puli: PHP's Next Package Revolution</a>
- Berhard Schussek - <a href="https://twitter.com/webmozart">@webmozart</a></p>

<p>Jan 21: 08:00 PM CST
<a href="https://nomadphp.com/2015/10/16/building-better-apis/">Building Better APIs</a>
- Mike Stowe - <a href="https://twitter.com/mikegstowe">@mikegstowe</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Expectation vs Reality: my first 1.5 years of professional programming]]></title>
            <link href="http://ericpoe.com/blog/2015/11/29/dev-expectation-vs-dev-reality"/>
            <updated>2015-11-29T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/11/29/dev-expectation-vs-dev-reality</id>
            <content type="html"><![CDATA[<p>I have been a professional developer for over a year and a half now.</p>

<p>About a year ago, my friend and mentor, John Kary, asked me how the job measured up to my expectations. I replied, honestly, that my expectations were met. However, I hadn't given it much thought since I was busy trying to learn so many new things. So, at the time, my expectation was that new developers spend a lot of time learning new things. Expectation: met.</p>

<p>Since that time, I have continued to learn new things, but I have also had time to think about the question more in depth.</p>

<p>I realized that I had many expectations of dev-life while I was studying programming.</p>

<p><strong>Caveat:</strong> Your mileage may vary</p>

<h3 id="expectation-1---programming-is-a-young-man%27s-game">Expectation 1 - Programming is a Young Man's Game</h3>

<p>This was probably my largest fear with changing my career and entering programming as a full-time job. I had read too much about <em>brogramming</em>, sexism, and ageism being rampant in the development world. As a middle-aged dude, I was worried about entering this career that was run by 20-something guys that call each other "bruh."</p>

<h3 id="reality-1---programming-is-open-to-all">Reality 1 - Programming is Open to All</h3>

<p>My first interview for my job was with a female boss and a potential coworker who was older than me and was also female. I have told both of them since that this put my fears to rest and made the rest of the interview-process much easier. My second interview was with the team, which was made up of the female boss, the older-than-me female developer, a younger female developer, a remote guy via robot interface, a younger guy, and my friend, John Kary. Another member of the team was absent due to his grandson being born.</p>

<p>Since that time, we have hired a guy from Pakistan, a slightly younger guy, a slightly older guy, and a much younger guy. I would like to see more women apply for the job openings. Perhaps next time.</p>

<h3 id="expectation-2---programming-requires-uml">Expectation 2 - Programming Requires UML</h3>

<p>My programming classes utilized <a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language" title="Unified Modeling Language">UML</a>, the various textbooks and other programming books also utilized UML. So, I imagined that dev meetings utilized UML on a dry-erase board.</p>

<h3 id="reality-2---learning-requires-uml">Reality 2 - Learning Requires UML</h3>

<p>In various team meetings, 1-on-1 dev meetings, and informal discussions, I have yet to see UML be utilized.</p>

<h3 id="expectation-3---developers-have-a-computer-science-degree">Expectation 3 - Developers Have a Computer Science Degree</h3>

<p>I imagined developer discussions being in some meta-language that incorporated algorithms, Big-O notation, and obscure design patterns.</p>

<h3 id="reality-3---developers-come-from-all-walks-of-life">Reality 3 - Developers Come From All Walks of Life</h3>

<p>Perhaps half of my team has some kind of Computer Science background and degree. Other members of my team have backgrounds in varied subjects from construction to film-studies.</p>

<p>In listening the various podcasts and attending various conferences and user-group meetings, I think that there is no fairly typical developer background. One can expect someone with a computer-science degree, but there are plenty of good developers out there without a degree, much less a computer-science degree.</p>

<h3 id="expectation-4---developers-are-invested-in-their-community">Expectation 4 - Developers Are Invested In Their Community</h3>

<p>I was a member of a developer community a decade before I became a professional developer. I have gone to developer conferences in Kansas City and Dallas and have met with many developers from those communities. I expected that all developers were interested in meeting with and working with developers from their community outside of their 9-to-5 job.</p>

<h3 id="reality-4---developers-come-from-all-walks-of-life">Reality 4 - Developers Come From All Walks of Life</h3>

<p>I know that this is the same as &#35;3; however, it fits here, too.</p>

<p>I have also met plenty of developers whom I have tried to recruit to join a local user group, yet they gave a non-committal "I'll look into it" when pressed. Most developers whom I have met are interested in programming for the 40-hours a week they are contracted to program. Outside of that time, they are interested in pursuing their own interests: wood-working, beer brewing, robot fighting, knitting, parade-float building, running, &amp; etc.</p>

<p>Even for me, family is my number 1 priority. Yet, I devote time to organizing a PHP User Group, planning and mentoring a <a href="http://coderdojokc.com/">CoderDojo</a>, and studying programming concepts and technologies outside of work.</p>

<h3 id="expectation-5---if-you-don%27t-play-reindeer-games%2C-you-don%27t-belong">Expectation 5 - If You Don't Play Reindeer Games, You Don't Belong</h3>

<p>What I knew of programmers is what I knew from media and my nerd friends. <a href="https://cardsagainsthumanity.com/">Cards Against Humanity</a>, Dungeons and Dragons, comic books, video games, Star Wars/Trek, and pop-culture ephemera rule developer society.</p>

<h3 id="reality-5---developers-come-from-all-walks-of-life">Reality 5 - Developers Come From All Walks of Life</h3>

<p>Guess what? Developer !== Dork. You might know some developers who fall into that stereotype, but you probably know others who have interests outside of developer stereotypes.</p>

<p>I have yet to play Cards Against Humanity at work. Yet, I have played it once after a CoderDojo session. I have had several Star Wars/Trek discussions with coworkers, but not all coworkers.</p>

<p>At lunch, we mostly talk about family and recent events in our lives. I have recently started a dev book club with my team for a once-per-week lunch discussion. Some of us gather once per month for <a href="http://nomadphp.com">NomadPHP</a> with a follow-up discussion.</p>

<h3 id="expectation-6---memes-are-huge">Expectation 6 - Memes Are Huge</h3>

<p>Before I got my job, I started reading <a href="https://reddit.com">reddit</a>. One thing that I learned is that memes are huge. So I ran through a bunch of memes on <a href="http://memegenerator.net/">meme generator</a>.</p>

<h3 id="reality-6---memes-are-huge-for-some">Reality 6 - Memes Are Huge for Some</h3>

<p>Memes are memes because they are memes. That's tautology for you.</p>

<p>Memes are drawn from popular culture. So, when I was a kid, saying "This is not the assignment you're looking for" was utilizing a meme. We just didn't call it that. 15 years ago, saying to a friend, "Wassup!" was utilizing a meme. We just didn't call it that.</p>

<p>So now, with the easy usage of <a href="https://en.wikipedia.org/wiki/Emoji">emoji</a> and the <a href="https://bitbucket.org/atlassianlabs/ac-koa-hipchat-sassy"><code>/meme</code></a> command in HipChat, memes are all too easy to utilize in a textual discussion.</p>

<p>Yet, not all of us know what the heck some of these memes mean. And some don't even bother with using memes in textual discussion. Memes tend to be a shibboleth in a team when a team shouldn't require such watch-words or phrases.</p>

<h3 id="expectation-7---programmers-are-a-monoculture">Expectation 7 - Programmers are a Monoculture</h3>

<p>When attending a conference, it's easy to see that the vast majority of attendees are younger white guys. The lines to the men's room are long whereas the lines to the ladies' room are non-existant. All programmers are heavy into nerd-core and oontz-oontz electronic music.</p>

<h3 id="reality-7-%26-conclusion---developers-come-from-all-walks-of-life">Reality 7 &amp; Conclusion - Developers Come From All Walks of Life</h3>

<p>This, I think, is the ultimate expectation. All of the expectations above reflect this expectation.</p>

<p>When I was a CS student, classmates were from various genders, sexual orientations, ethnic backgrounds, races, and religions. This expectation was already smashed.</p>

<p>When I joined the league of professional programmers, I met programmers from all walks of life: programmers who grew up dirt poor and programmers who grew up with plenty; programmers who grew up steeped in nerd-core and programmers who came about it quite accidentally.</p>

<p>I am a middle-aged white guy. Yet, I've only been in this game professionally for 1.5 years. I have a lifetime of experience behind me in jobs &amp; a career other than programming. You could take a glance at me and think that I am the very model of a modern career programmer. Yet, you could not be more wrong.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[My Year of Code]]></title>
            <link href="http://ericpoe.com/blog/2015/11/13/my-year-of-code"/>
            <updated>2015-11-13T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/11/13/my-year-of-code</id>
            <content type="html"><![CDATA[<p>2015 was my year to really dive into PHP. Up until this year, PHP was  hobby language for me -- much as Python, Haskell, C++, Dart, JavaScript, and Java have been hobby languages. Granted, last year I finally took a job where PHP is where I spend half of my time.</p>

<p>This year, I took up intensive study of PHP. At the beginning of the year, I poured over the <a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey. I even passed the <a href="http://www.zend.com/en/services/certification/php-5-certification">Zend Certified PHP Engineer exam</a> and earned my <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certification</a>. I also took up more of a leadership role in my local PHP user group, <a href="http://www.meetup.com/kcphpug/">KCPHPUG</a>, gave a few talks, and have been hosting meetups both at work and at a local cafÃ©. In the late Spring/early Summer, I began work on a PHP library called <a href="https://github.com/ericpoe/ophp">OPHP</a>. In April, I attended the <a href="http://lonestarphp.com/">Lone Star PHP conference</a> and got to meet and hang out with quite a few luminaries of the community.</p>

<p>I think I can safely say that 2015 has been a year of PHP for me.</p>

<p>For next year, my language of intensive study will be JavaScript. No matter who I talk with about programming, JavaScript seems to be the <em>lingua franca</em> of web programming. I have already started to look deeply into Sencha's <a href="https://www.sencha.com/products/extjs">Ext JS</a>, which is the JavaScript framework we use at work. <a href="http://es6-features.org/">EcmaScript 6</a> has piqued my interest since it was ratified in June. I have also been interested in learning more about <a href="https://nodejs.org">node</a> since it has usage in <a href="http://electron.atom.io/">Atom Electron</a> and beyond.</p>

<p>By this time next year, I hope to have a native comfort in JavaScript.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[so much depends upon a fresh doughnut]]></title>
            <link href="http://ericpoe.com/blog/2015/08/12/fresh-doughnut"/>
            <updated>2015-08-12T18:43:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/08/12/fresh-doughnut</id>
            <content type="html"><![CDATA[<figure>
<pre>
so much depends
upon

a fresh dough
nut

glazed with maple
icing

beside the black
coffee.
</pre>
<figcaption>
&mdash; Based on <a href="http://www.poets.org/poetsorg/poem/red-wheelbarrow" target="_blank">The Red Wheelbarrow</a> by William Carlos Williams
</figcaption>
</figure>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Number System: Time for a change?]]></title>
            <link href="http://ericpoe.com/blog/2015/07/16/number-system-time-for-a-change"/>
            <updated>2015-07-16T22:42:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/07/16/number-system-time-for-a-change</id>
            <content type="html"><![CDATA[<p>I have been thinking about numbers for most of my life. It wasn't until I helped my oldest child learn to count to 20 that I thought that the way we count in the English language is silly. There is no logic in our base-10 counting system until we get to 17: "fif teen" (what's a "fif?") is followed by "six teen" (ah, six is a number I recognize!) which is followed by "seven teen" (aha! seven is another number I recognize!). And this got me thinking that surely there's a better way to count.</p>

<p>Soon thereafter, I started finding a better way to count in a chapter of Malcolm Gladwell's book, <a href="http://www.amazon.com/gp/product/0316017930/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0316017930&amp;linkCode=as2&amp;tag=erpo0f-20&amp;linkId=AZHPZTBIYAL52CGL">Outliers</a>. Gladwell posits that <a href="http://gladwell.com/outliers/rice-paddies-and-math-tests/">Chinese-speaking kids can memorize multi-digit numbers much faster than English-speaking kids can</a> since the sequence "4, 8, 5, 3, 9, 7, 6" is made up of monosyllabic words in Chinese and "7" has 2 syllables in English. I would add that since Chinese is a tonal language, this sequence also has its own tune. Quick show of hands, who knows the 7-digit phone number from the Tommy Tutone hit, "<a href="https://www.youtube.com/watch?v=6WTdTwcmxyo">Jenny</a>" from 1981? Do you know that number because you can sing the number or because you can recite the number?</p>

<p>In the same chapter, Gladwell suggests that adding numbers in Chinese is easier than in English because the names of the numbers are more logical in Chinese than in English. For instance, the number 25 is "twenty-five" in English and the equivalent to "two ten five" in Chinese. Aha! Then 11 is "ten 1" in Chinese and 123 is "hundred two-ten three" in Chinese. In English (and <lang = "es">En espaÃ±ol</lang> ), the numbers between 11 and 15 are hard to memorize. In Chinese, pshh: "ten one," "ten two," "ten three," "ten four," "ten five."</p>

<p>This made me think that perhaps learning numbers would be easier if we came up with different units. If we were to count "0 - 10" in the standard English manner, then "11 - 19" would be known as "ten one," "ten two," "ten three," &amp; etc. "20 - 29" would be "two-ten," "two-ten one," "two-ten two," "two-ten three," &amp; etc.</p>

<p>Already, "1200" can be read two different ways in English, "One thousand two hundred" and "Twelve hundred.". It wouldn't be too large of a stretch for "1000" to no longer be known as "one thousand" but to be known as "ten hundred." Instead, "10000" would be known as "one thousand." Since the place names are changed in an exponential-growth pattern, this probably should be written as "1,0000" (10^4 or 100 hundreds) instead of "10,000." I could then call 1,0000,0000 "1 million" (10^8 or 1 thousand thousands) instead of "100 million," and 1,0000,0000,0000,0000 (10^16 or 1 million millions) "1 billion" instead of "10 quintillion."</p>

<table class="table table-bordered">
<tr>
    <th>Place</th>
    <th>10^0</th>
    <th>10^1</th>
    <th>10^2</th>
    <th>10^4</th>
    <th>10^8</th>
    <th>10^16</th>
    <th>10^32</th>
</tr>
<tr>
    <th>Place Name</th>
    <td>Ones</td>
    <td>Tens</td>
    <td>Hundreds</td>
    <td>Thousands</td>
    <td>Millions</td>
    <td>Billions</td>
    <td>Trillions</td>

</tr>
<tr>
    <th>Smallest Example</th>
    <td>1</td>
    <td>10</td>
    <td>100</td>
    <td>1,0000</td>
    <td>1,0000,<wbr>0000</td>
    <td>1,0000,<wbr>0000,<wbr>0000,<wbr>0000</td>
    <td>1,0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000,<wbr>0000</td>
</tr>
</table>

<p>In my numbering system, I might also shorten two names: "seven" becomes "sep" and "tens" become "-ty"(pronounced like "tea")." 10 - 20 would be read as:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <td>10</td>
    <td>11</td>
    <td>12</td>
    <td>13</td>
    <td>14</td>
    <td>15</td>
    <td>16</td>
    <td>17</td>
    <td>18</td>
    <td>19</td>
    <td>20</td>
</tr>
<tr>
    <th>Name</th>
    <td>Onety</td>
    <td>Onety-one</td>
    <td>Onety-two</td>
    <td>Onety-three</td>
    <td>Onety-four</td>
    <td>Onety-five</td>
    <td>Onety-six</td>
    <td>Onety-sep</td>
    <td>Onety-eight</td>
    <td>Onety-nine</td>
    <td>Twoty</td>
</tr>
</table>

<p>Already there's some logic to the number names. The place names would be recursive like so:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <th>English Name</th>
    <th>New Name</th>
</tr>
<tr>
    <td>5</td>
    <td>Five</td>
    <td>Five</td>
</tr>
<tr>
    <td>55</td>
    <td>Fifty-five</td>
    <td>Fivety-five</td>
</tr>
<tr>
    <td>555</td>
    <td>Five-hundred fifty-five</td>
    <td>Five-hundred fivety-five</td>
</tr>
<tr>
    <td>5555</td>
    <td>Five-thousand fifty-five</td>
    <td>Fivety-five-hundred fivety-five</td>
</tr>
<tr>
    <td>5,5555</td>
    <td>Fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>55,5555</td>
    <td>Five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>555,5555</td>
    <td>Five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>5555,5555</td>
    <td>Fifty-five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Fivety-five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
<tr>
    <td>5,5555,5555</td>
    <td>Five-hundred-fifty-five-million five-hundred-fifty-five-thousand five-hundred fifty-five</td>
    <td>Five-million fivety-five-hundred-fivety-five-thousand fivety-hundred fivety-five</td>
</tr>
</table>

<h3 id="it%27s-already-been-done">It's Already Been Done</h3>

<p>While thinking of this numbering system, I found out that one of my programming heroes, Donald Knuth, had come up with a very similar alternative almost 30 years prior (1981 - same year as Tommy Tutone's number-memorization hit mentioned above -- coincidence?). His system is called "<a href="https://en.wikipedia.org/wiki/-yllion">-yllion</a>" and is also influenced by the Chinese number system, has exponential binary growth, grouping digits in fours, renames some of the numbers, and has recursive naming. Knuth gets rid of "thousand" and replaces it with "myriad;" "million," "billion," etc become "myllion," "byllion," etc. I thought it would be great to use a combination of the two, especially for insanely large numbers.</p>

<p>While driving or working, I would count things in this manner until it became second-nature to me. Then I realized that knowing a secret language that has a global speaker count of 1 is not a good thing. I could either spread my idea by conquering and burning the world ala Genghis Khan or I could quietly give up. I chose the more gentle option.</p>

<h3 id="the-chinese-connection">The Chinese Connection</h3>

<p>Fast forward to a few nights ago. I was studying the Chinese numbering system via edX's <a href="https://www.edx.org/school/mandarinx">MandarinX</a> course and was learning the  separate symbols for 1, 10, 100, &amp; 1000 (<lang = "zh">ä¸, å, ä¸ç¾, ä¸å</lang>, respectively). Then it gets interesting, Chinese has symbols for 10,000 (<lang = "zh">ä¸ä¸</lang>) and doesn't have another new symbol until 100,000,000 (<lang = "zh">ä¸äº¿</lang>). Why 10,000 and 100,000,000? Then I thought back to my toy numbering system. Notice any similarities?</p>

<table class="table table-bordered">
<tr>
    <th>My Number System</th>
    <th>Chinese</th>
</tr>
<tr>
    <td>1</td>
    <td lang = "zh">ä¸</td>
</tr>
<tr>
    <td>10</td>
    <td lang = "zh">å</td>
</tr>
<tr>
    <td>100</td>
    <td lang = "zh">ä¸ç¾</td>
</tr>
<tr>
    <td>1000</td>
    <td lang = "zh">ä¸å</td>
</tr>
<tr>
    <td>1,0000</td>
    <td lang = "zh">ä¸ä¸</td>
</tr>
<tr>
    <td>1,0000,0000</td>
    <td lang = "zh">ä¸äº¿</td>
</tr>
</table>

<h3 id="a-modest-proposal">A Modest Proposal</h3>

<p>I do not believe that changing the Western number system is a reasonable expectation. After all, the Metric system (ok, "SI") has been around for several hundred years and the US is still stuck on the Imperial system for most things. We still use miles, pounds per square inch, and degrees Fahrenheit; but there's hope: I recently ran a 5K (5 kilometer) race, my mechanic has to use Metric wrenches on my and others' cars, and we buy bottles of soda and hooch in Liters (750 mL, 1.5 L, or 2 L). So perhaps there might be room for the -yllion system or maybe my modified -yllion system. Given the huge increase in drive sizes over the last 20 years, we are quickly running out of ways to describe their units of capacity. 25ish years ago, I thought that I was pretty hot stuff with my 20 MB (~ 20,971,520 Bytes) RLL hard drive. 1 decade later, I was thinking that my 250 GB (~ 268,435,456,000 Bytes) PATA drive was pretty hot stuff. A decade later, yesterday, I saw a 6 TB (~ 6,597,069,766,656 Bytes) drive array on sale for the same price I bought my first 20 MB hard drive. What's my point? The drives I'm describing are consumer-grade drives. In the IT-world, consumer-grade size is laughable. 15 years ago, I had heard an NPR report stating that the total size of data on the Internet was estimated to be 2 Terabytes. Last year, when I left a small IT shop in a small school district, we were in talks to bring on a drive array whose size was measured in Exabytes. Exabytes. That totally bypasses the whole Petabytes unit of measurement. So, after Exabytes, what then? Zottabytes? Then what? OMGigabytes?</p>

<p>If we were to recalibrate our units of measurement for computer-based things, perhaps we could have an easier time of describing those units of measurement if we were to use a different unit of measurement.</p>

<p>Let 1000 Bytes = 1 KB. I know 1 standard KB == 1024 Bytes, but let's go with the marketing assumption that computer units are base-10. That would mean that 1 Byte is the same as 0.001 KB. Now, let's expand upon these KB units using the -yllion number system:</p>

<table class="table table-bordered">
<tr>
    <th>Number</th>
    <th>Place</th>
    <th>Current Name</th>
    <th>New Name: Base = 1 KB</th>
    <th>New Name: Base = 1 GB</th>
</tr>
<tr>
    <td>0.001 KB</td>
    <td>10^-3</td>
    <td>1 Byte</td>
    <td>1 ten-hundredth KB</td>
    <td>100 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>0.01 KB</td>
    <td>10^-2</td>
    <td>10 Bytes</td>
    <td>1 hundredth KB</td>
    <td>10 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>0.1 KB</td>
    <td>10^-1</td>
    <td>100 Bytes</td>
    <td>1 tenth KB</td>
    <td>1 Myriad Myllionth GB</td>
</tr>
<tr>
    <td>1 KB</td>
    <td>10^0</td>
    <td>1 KB</td>
    <td>1 KB</td>
    <td>100 Myllionth GB</td>
</tr>
<tr>
    <td>10 KB</td>
    <td>10^1</td>
    <td>10 Kilobytes</td>
    <td>10 KB</td>
    <td>10 Myllionth GB</td>
</tr>
<tr>
    <td>100 KB</td>
    <td>10^2</td>
    <td>100 Kilobytes</td>
    <td>1 Hundred KB</td>
    <td>1 Myllionth GB</td>
</tr>
<tr>
    <td>1000 KB</td>
    <td>10^3</td>
    <td>1 Megabyte</td>
    <td>10 Hundred KB</td>
    <td>100 Myriadth GB</td>
</tr>
<tr>
    <td>1,0000 KB</td>
    <td>10^4</td>
    <td>10 Megabytes</td>
    <td>1 Myriad KB</td>
    <td>10 Myriadth GB</td>
</tr>
<tr>
    <td>10,0000 KB</td>
    <td>10^5</td>
    <td>100 Megabytes</td>
    <td>10 Myriad KB</td>
    <td>1 Myriadth GB</td>
</tr>
<tr>
    <td>100,0000 KB</td>
    <td>10^6</td>
    <td>1 Terabyte</td>
    <td>1 Hundred Myriad KB</td>
    <td>10 Hundredth GB</td>
</tr>
<tr>
    <td>1000,0000 KB</td>
    <td>10^7</td>
    <td>10 Terabytes</td>
    <td>10 Hundred Myriad KB</td>
    <td>1 Hundredth GB</td>
</tr>
<tr>
    <td>1;0000,0000 KB</td>
    <td>10^8</td>
    <td>100 Terabytes</td>
    <td>1 Myllion KB</td>
    <td>1 Tenth GB</td>
</tr>
<tr>
    <td>10;0000,0000 KB</td>
    <td>10^9</td>
    <td>1 Gigabyte</td>
    <td>10 Myllion KB</td>
    <td>1 GB</td>
</tr>
<tr>
    <td>100;0000,0000 KB</td>
    <td>10^10</td>
    <td>10 Gigabytes</td>
    <td>1 Hundred Myllion KB</td>
    <td>10 GB</td>
</tr>
<tr>
    <td>1000;0000,0000 KB</td>
    <td>10^11</td>
    <td>100 Gigabytes</td>
    <td>10 Hundred Myllion KB</td>
    <td>1 Hundred GB</td>
</tr>
<tr>
    <td>1,0000;0000,0000 KB</td>
    <td>10^12</td>
    <td>1 Terabyte</td>
    <td>1 Myriad Myllion KB</td>
    <td>10 Hundred GB</td>
</tr>
<tr>
    <td>10,0000;0000,0000 KB</td>
    <td>10^13</td>
    <td>10 Terabytes</td>
    <td>10 Myriad Myllion KB</td>
    <td>1 Myriad GB</td>
</tr>
<tr>
    <td>100,0000;0000,0000 KB</td>
    <td>10^14</td>
    <td>100 Terabytes</td>
    <td>100 Myriad Myllion KB</td>
    <td>10 Myriad GB</td>
</tr>
<tr>
    <td>1000,0000;0000,0000 KB</td>
    <td>10^15</td>
    <td>1 Petabyte</td>
    <td>10 Hundred Myriad Myllion KB</td>
    <td>100 Myriad GB</td>
</tr>
<tr>
    <td>1:0000,0000;0000,0000 KB</td>
    <td>10^16</td>
    <td>10 Petabytes</td>
    <td>1 Byllion KB</td>
    <td>1 Myllion GB</td>
</tr>
<tr>
    <td>1'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000 KB</td>
    <td>10^32</td>
    <td>100 Million Yottabytes</td>
    <td>1 Tryllion KB</td>
    <td>100 Myriad Myllion Byllion GB</td>
</tr>
<tr>
    <td>1'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000'<wbr>0000,0000;0000,0000:<wbr>0000,0000;0000,0000 KB</td>
    <td>10^64</td>
    <td>10 Duodecillion Yottabytes</td>
    <td>1 Quadryllion KB</td>
    <td>100 Myriad Myllion Byllion Tryllion GB</td>
</tr>
</table>

<p>As you can see, somewhere between 10 Petabytes (1 Byllion KB) and 100 Million Yottabytes (1 Tryllion KB), we run out of SI units to describe the computer capacity. At some point, we'll either have to come up with a bunch of SI units to use with capacity, or we'll have to come up with a different way to count that capacity.</p>

<p>I expect to see capacities measured in Yottabytes within the next 20 years. Then what?</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP&#039;s Array_Filter Oddity]]></title>
            <link href="http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity"/>
            <updated>2015-07-08T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/07/08/php-array-filter-oddity</id>
            <content type="html"><![CDATA[<p>I was studying the <a href="http://php.net/manual/en/function.array-filter.php"><code>array_filter</code></a> in PHP and was enjoying coming up with a test that could help me learn better <code>array_filter</code> magic. For instance, to filter all words whose first letter is a vowel, I created this PHPUnit test:</p>

<pre><code class="php">public function testFilterVowelWords()
{
    $vowel = function ($word) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($word[0], $vowels);
    };

    $words = ["apple", "baby", "cookie", "danger", "element", "fountain", "grape"];

    $vowelWords = array_filter($words, $vowel);

    $this-&gt;assertEquals(["apple", "element"], array_values($vowelWords));
}
</code></pre>

<p>So, yay <code>array_filter</code>! But wait, what's this? There's an optional flag for <code>array_filter</code> that was introduced in PHP 5.6? It allows one to filter by array key, or if one is completely nuts, by both array value and array key. Woah.
<img src="https://s3.amazonaws.com/giphymedia/media/yUIktdHUIamcg/giphy.gif"></p>

<p>So, if one were to filter by key, easy-peasy. The flag is <code>ARRAY_FILTER_USE_KEY</code>:</p>

<pre><code class="php">public function testFilterVowelWordsByKey()
{
    $vowel = function ($key) {
        $vowels = ["a", "e", "i", "o", "u"];
        return in_array($key, $vowels);
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $vowel, ARRAY_FILTER_USE_KEY);

    $this-&gt;assertEquals(["a"=&gt;"apple", "e"=&gt;"element"], $vowelWords);
}
</code></pre>

<p>So, if one wanted to filter by key AND value, the flag would be <code>ARRAY_FILTER_USE_BOTH</code>, right?</p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($key, $value) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($key, $vowels)) {
            return true;
        } else {
            return (in_array($value[1], $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yet, epic fail!</p>

<p>The <code>ARRAY_FILTER_USE_BOTH</code> flag requires the order: <code>value</code> then <code>key</code> NOT <code>key</code> then <code>value</code></p>

<pre><code class="php">public function testFilterVowelWordsByKeyAndValue()
{
    $strange = function ($value, $key) {
        $vowels = ["a", "e", "i", "o", "u"];
        if (in_array($value[1], $vowels)) {
            return true;
        } else {
            return (in_array($key, $vowels));
        }
    };

    $words = ["a" =&gt; "apple", "b" =&gt; "baby", "c"=&gt;"cookie", "d"=&gt;"danger", "e"=&gt;"element", "f"=&gt;"fountain", "g"=&gt;"grape"];

    $vowelWords = array_filter($words, $strange, ARRAY_FILTER_USE_BOTH);

    $this-&gt;assertEquals(["a"=&gt;"apple", "b"=&gt;"baby", "c" =&gt; "cookie", "d" =&gt; "danger", "e" =&gt; "element", "f" =&gt; "fountain"], $vowelWords);
}
</code></pre>

<p>Yay! This test passes! But, what the heck? Why <code>value</code> then <code>key</code>? Every time we read about <code>key =&gt; value</code> pairs, it's in the order of <code>key</code> then <code>value</code>. Yet, this is <code>value</code> then <code>key</code>. What gives?</p>

<p>I looked into this. I couldn't find any <a href="https://wiki.php.net/rfc">RFCs</a> recommending this order. I even checked PHP internals discussions and saw the question raised of <a href="http://marc.info/?l=php-internals&amp;m=137159339704961&amp;w=2">which should come first, key or value</a>, but the question doesn't get answered. Eventually, we get a statement of (paraphrased)<a href="http://marc.info/?l=php-internals&amp;m=138023845322301&amp;w=2">"Hey, having flags for using key or using both key &amp; value is great, I'll add it."</a>. The <a href="https://github.com/php/php-src/pull/287">pull request</a>, though it contains discussion on adding this flag, doesn't contain any discussion on parameter order. The <a href="https://github.com/php/php-src/blob/master/ext/standard/array.c#L4803">source code</a> does not contain enough documentation to give an inkling as to why this is.</p>

<p>I struggled to figure out a good reason for <code>value</code> to come before <code>key</code> when using the <code>ARRAY_FILTER_USE_BOTH</code> flag. In desperation, I reached out to the PHP Internals dev who implemented this feature, Tjerk Meesters (aka '<a href="https://twitter.com/datibbaW">datibbaw</a>'). As an exemplar of where the amazing PHP community shines, Tjerk responded within minutes with helpful background information on this feature. First, this feature was designed to not break existing implementations of <code>array_filter</code>. Adding <code>key</code> as the second parameter seemed to be the most polite way to do this. Secondly, this is the same order as used in JavaScript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter()</a>. Boom.</p>

<p>The way I justify the order is by looking at the original intent of <code>array_filter</code> -- it was designed to filter an array based on the values contained within that array. So, value is first and foremost the primary thing this function checks against; the key is merely secondary. Therefore, when using the <code>ARRAY_FILTER_USE_BOTH</code> flag, the order of parameters for the callback will be <code>value</code> and then <code>key</code>.</p>

<p>If I were to treat this function as a consumer that turns food into another product, the main food this function eats is the value platter. For dessert, it might choose to eat a key lime pie. Or it might decide to order the full course and ask for both the value platter with dessert.</p>

<p>What had seemed like an oddity at first now makes sense in the right frame of mind. If you use <code>array_filter</code>, remember that it is all about the array <code>value</code>. If you want to include the <code>key</code> in the filter, know that <code>key</code> is always secondary to the original intent.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Low Carb High Fat Diet]]></title>
            <link href="http://ericpoe.com/blog/2015/05/12/lchf-diet"/>
            <updated>2015-05-12T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/05/12/lchf-diet</id>
            <content type="html"><![CDATA[<p>The LCHF diet can be summarized as follows:</p>

<p>"The fat you eat flows through; the fat you make sticks to you."</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Leveled Up: PHP Certified]]></title>
            <link href="http://ericpoe.com/blog/2015/05/08/php-certified"/>
            <updated>2015-05-08T00:00:00+00:00</updated>
            <id>http://ericpoe.com/blog/2015/05/08/php-certified</id>
            <content type="html"><![CDATA[<p>On Wednesday, I took an extended lunch break in order to take the Zend PHP Certification test at a local Pearson VUE Testing Center.</p>

<p>After a few years of using PHP and studying for a few months, I am a <a href="http://www.zend.com/en/yellow-pages/ZEND027285">Zend Certified PHP Engineer</a>!</p>

<p>Books that have helped me:</p>

<ul>
<li><a href="http://shop.oreilly.com/product/0636920012443.do">Programming PHP, 3rd Ed</a> by Kevin Tatroe, Peter MacIntyre, &amp; Rasmus Lerdorf</li>
<li><a href="http://www.phparch.com/books/zend-php-5-certification-study-guide-3rd-edition/">Zend PHP 5 Certification Study Guide, Third Edition</a> by Davey Shafik and Ben Ramsey</li>
<li>Reviewing the  <a href="https://www.zend.com/en/services/certification/php-certification-study-guide">Zend PHP Certification Study Guide</a> and doing the problems contained within.</li>
</ul>

<p>People who have helped me along the way:</p>

<ul>
<li>My wife.</li>
<li>My kids.</li>
<li>My mentor and fellow KCPUG co-organizer, <a href="http://johnkary.net">John Kary</a></li>
<li>KCPUG leader <a href="https://twitter.com/dan_holmes/">Dan Holmes</a> and the great members of the <a href="http://www.meetup.com/kcphpug/">KCPUG</a>.</li>
<li><a href="http://blog.calevans.com/">Cal Evans</a> and the great speakers at <a href="http://nomadphp.com/">NomadPHP</a>.</li>
<li><a href="http://www.geekyboy.com/">Adam Culp</a> for giving me the push at Lone Star PHP 2014.</li>
</ul>

<p>Practices that have help me:</p>

<ul>
<li>ABC: Alway be coding!</li>
<li>Added an hour appointment to my calendar every day, after the kids were in bed, to study.</li>
<li>Watched NomadPHP talks (live, recorded, or <a href="https://www.youtube.com/channel/UCYHDBrzJ5o5d97KlCAUhICA">on Youtube</a>)</li>
<li>Listen to various podcasts about programming, not all about PHP</li>
<li>Practiced</li>
<li>Kata</li>
<li>Present at KCPUG (forced me to really think about the how and why)</li>
<li>Followed my curiosity in code</li>
</ul>

<p>These practices and personal connections will continue long after my certification studies ended. I'm looking forward to the next leg of the journey.</p>
]]></content>
        </entry>
    </feed>